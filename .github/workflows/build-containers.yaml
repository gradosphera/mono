name: Build Docker Images

on:
  push:
    branches:
      - testnet
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          clean: true
          fetch-depth: 0
          
      - name: Debug - Проверка файлов в репозитории
        run: |
          echo "Проверяем файлы в директории components/desktop/src-ssr/middlewares/"
          ls -la components/desktop/src-ssr/middlewares/
          echo "Содержимое последних коммитов:"
          git log -n 3 --name-status
          
      - name: Set docker tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "DOCKER_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          fi
          
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Remove existing images
        run: |
          echo "Удаление существующих образов..."
          docker rmi dicoop/desktop:${{ env.DOCKER_TAG }} || true
          docker rmi dicoop/coopback:${{ env.DOCKER_TAG }} || true
          docker rmi dicoop/cooparser:${{ env.DOCKER_TAG }} || true
          docker rmi dicoop/notificator:${{ env.DOCKER_TAG }} || true
          docker system prune -f
          
      # Сборка и публикация каждого образа с соответствующим target
      - name: Build desktop image
        run: |
          echo "Сборка desktop образа..."
          # Проверяем перед сборкой
          ls -la components/desktop/src-ssr/middlewares/
          # Полностью отключаем кеширование при сборке
          docker build --no-cache --target desktop -t dicoop/desktop:${{ env.DOCKER_TAG }} .
          # Проверяем содержимое собранного образа
          container_id=$(docker create dicoop/desktop:${{ env.DOCKER_TAG }})
          docker cp $container_id:/app/src-ssr/middlewares ./middlewares_in_container
          echo "Файлы в контейнере (middlewares):"
          ls -la ./middlewares_in_container
          docker rm $container_id
          # Отправляем образ
          docker push dicoop/desktop:${{ env.DOCKER_TAG }}
          
      - name: Build controller image
        run: |
          docker build --no-cache --target controller -t dicoop/coopback:${{ env.DOCKER_TAG }} .
          docker push dicoop/coopback:${{ env.DOCKER_TAG }}
          
      - name: Build parser image
        run: |
          docker build --no-cache --target parser -t dicoop/cooparser:${{ env.DOCKER_TAG }} .
          docker push dicoop/cooparser:${{ env.DOCKER_TAG }}
          
      - name: Build notificator image
        run: |
          docker build --no-cache --target notificator -t dicoop/notificator:${{ env.DOCKER_TAG }} .
          docker push dicoop/notificator:${{ env.DOCKER_TAG }}
          
      # Отправка хука для деплоя
      - name: Trigger deployment webhook
        if: ${{ success() }}
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Хук для продакшена
            curl -X POST ${{ vars.PRODUCTION_WEBHOOK_URL }} \
              -H 'Content-Type: application/json' \
              -d '${{ env.DOCKER_TAG }}'
          else
            # Хук для тестнета
            curl -X POST ${{ vars.TESTNET_WEBHOOK_URL }} \
              -H 'Content-Type: application/json' \
              -d '${{ env.DOCKER_TAG }}'
          fi