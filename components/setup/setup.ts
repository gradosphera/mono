import inquirer, { Answers } from 'inquirer';
import { promises as fs } from 'fs';
import { exec } from 'child_process';
import util from 'util';
import ora from 'ora';

const execPromise = util.promisify(exec);

console.clear();
console.log(`
888b     d888  .d88888b.  888b    888  .d88888b.
8888b   d8888 d88P" "Y88b 8888b   888 d88P" "Y88b
88888b.d88888 888     888 88888b  888 888     888
888Y88888P888 888     888 888Y88b 888 888     888
888 Y888P 888 888     888 888 Y88b888 888     888
888  Y8P  888 888     888 888  Y88888 888     888
888   "   888 Y88b. .d88P 888   Y8888 Y88b. .d88P
888       888  "Y88888P"  888    Y888  "Y88888P"`);

interface MenuAnswers extends Answers {
  choice: 'dev' | 'use';
  env?: 'frontend-testnet' | 'local-full';
}

async function mainMenu(): Promise<void> {
  const { choice } = await inquirer.prompt<MenuAnswers>([
    {
      type: 'list',
      name: 'choice',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MONO:',
      choices: [
        { name: '–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', value: 'dev' },
        { name: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', value: 'use' }
      ]
    }
  ]);

  if (choice === 'use') {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í—ã—Ö–æ–¥...');
    process.exit(0);
  }

  await developmentMenu();
}

async function developmentMenu(): Promise<void> {
  const { env } = await inquirer.prompt<MenuAnswers>([
    {
      type: 'list',
      name: 'env',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:',
      choices: [
        { name: '–¢–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ', value: 'frontend-testnet' },
        { name: '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥', value: 'local-full' }
      ]
    }
  ]);

  if (env === 'frontend-testnet') {
    console.log('üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ —Ç–µ—Å—Ç–Ω–µ—Ç–µ...');
    await setupFrontendTestnet();
  } else if (env === 'local-full') {
    console.log('üñ•Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥...');
    await setupLocalFull();
  }
}

async function setupFrontendTestnet(): Promise<void> {
  await copyFile('../desktop/.env-example', '../desktop/.env');
  await copyFile('../desktop/Env-testnet.ts', '../desktop/src/shared/config/Env.ts');

  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
  await runCommandWithSpinner('cd ../cooptypes && pnpm run build', '–°–±–æ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–æ–≤');
  await runCommandWithSpinner('cd ../factory && pnpm run build', '–°–±–æ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
  await runCommandWithSpinner('cd ../sdk && pnpm run build', '–°–±–æ—Ä–∫–∞ SDK');
  
  console.log('\n‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.');
  console.log('üîπ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
  console.log('   üíª `pnpm run dev:desktop`');
}

async function setupLocalFull(): Promise<void> {
  await copyFile('../desktop/.env-example', '../desktop/.env');
  await copyFile('../desktop/Env-example.ts', '../desktop/src/shared/config/Env.ts');

  await copyFile('../controller/.env-example', '../controller/.env');
  await copyFile('../boot/.env-example', '../boot/.env');
  await copyFile('../factory/.env-example', '../factory/.env');
  await copyFile('../notificator/.env-example', '../notificator/.env');
  await copyFile('../parser/.env-example', '../parser/.env');

  console.log('\nüöÄ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...');
  await runCommandWithSpinner('docker compose up -d', '–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã');

  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
  await runCommandWithSpinner('cd ../cooptypes && pnpm run build', '–°–±–æ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–æ–≤');
  await runCommandWithSpinner('cd ../factory && pnpm run build', '–°–±–æ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
  await runCommandWithSpinner('cd ../sdk && pnpm run build', '–°–±–æ—Ä–∫–∞ SDK');
  await runCommandWithSpinner('cd ../contracts && pnpm run build:all', '–°–±–æ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤');

  console.log('\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  console.log('üîπ –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –æ–∫–Ω–∞—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:');
  console.log('   üíª `pnpm boot` (–ó–∞–ø—É—Å–∫ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)');
  console.log('   üíª `pnpm run dev:backend` (–ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞)');
  console.log('   üíª `pnpm run dev:desktop` (–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)');
}

async function copyFile(source: string, destination: string): Promise<void> {
  try {
    await fs.copyFile(source, destination);
    console.log(`üìÇ ${source} ‚Üí ${destination}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${source}:`, error);
  }
}

async function runCommandWithSpinner(command: string, message: string): Promise<void> {
  const spinner = ora(`${message}...`).start();
  try {
    await execPromise(command);
    spinner.succeed(`${message} ‚úÖ`);
  } catch (error) {
    spinner.fail(`${message} ‚ùå`);
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã "${command}":`, error);
  }
}

// –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
mainMenu();
