interface ActionTrace {
  act?: {
    account: string
    name: string
    authorization?: { actor: string }[]
  }
  console?: string
  inline_traces?: ActionTrace[]
}

interface TransactionResult {
  processed?: {
    action_traces?: ActionTrace[]
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param transaction - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ blockchain.api.transact
 */
export function consoleIt(transaction: TransactionResult): void {
  if (!transaction?.processed?.action_traces) {
    console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ action traces')
    return
  }

  console.log('\nüìã –ö–û–ù–°–û–õ–¨ –õ–û–ì–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:')
  console.log('='.repeat(50))

  let hasConsoleLogs = false

  function processActionTrace(trace: ActionTrace, depth = 0): void {
    const indent = '  '.repeat(depth)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏
    const account = trace.act?.account || 'unknown'
    const action = trace.act?.name || 'unknown'
    const actor = trace.act?.authorization?.[0]?.actor || 'unknown'

    // –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    console.log(`${indent}üîß ${account}:${action} (actor: ${actor})`)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–∏, –ø–µ—á–∞—Ç–∞–µ–º –∏—Ö
    if (trace.console) {
      hasConsoleLogs = true
      const logs = trace.console.split('\n').filter(log => log.trim())

      if (logs.length > 0) {
        console.log(`${indent}üìù Console output:`)
        logs.forEach((log) => {
          console.log(`${indent}   ${log}`)
        })
      }
    }
    else {
      console.log(`${indent}   (–Ω–µ—Ç –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤)`)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline traces —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    if (trace.inline_traces?.length) {
      console.log(`${indent}   ‚Ü≥ Inline actions:`)
      trace.inline_traces.forEach((inlineTrace) => {
        processActionTrace(inlineTrace, depth + 1)
      })
    }

    if (depth === 0) {
      console.log('') // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ action traces
  transaction.processed.action_traces.forEach((trace, index) => {
    console.log(`\nüìç Action ${index + 1}:`)
    processActionTrace(trace, 0)
  })

  if (!hasConsoleLogs) {
    console.log('‚ÑπÔ∏è  –í —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤')
  }

  console.log('='.repeat(50))
  console.log('üèÅ –ö–æ–Ω–µ—Ü –ª–æ–≥–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n')
}
