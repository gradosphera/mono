import { afterAll, beforeAll, describe, expect, it } from 'vitest'
import { CapitalContract, SovietContract } from 'cooptypes'
import Blockchain from '../blockchain'
import config from '../configs'
import { getTotalRamUsage, globalRamStats } from '../utils/getTotalRamUsage'
import { addUser } from '../init/participant'
import { generateRandomUsername } from '../utils/randomUsername'
import { generateRandomSHA256 } from '../utils/randomHash'
import { sleep } from '../utils'
import { getCoopProgramWallet, getLedgerAccountById } from './wallet/walletUtils'
import { registerContributor } from './capital/registerContributor'
import { signAppendix } from './capital/signAppendix'
import { capitalProgramId, circulationAccountId, sourceProgramId } from './capital/consts'
import { makeCombinedChecksum256NameIndexKey } from './shared/combinedKeys'
import { commitToResult } from './capital/commitToResult'
import { processApprove } from './capital/processApprove'
import { refreshSegment } from './capital/refreshSegment'
import { signWalletAgreement } from './wallet/signWalletAgreement'
import { fakeDocument } from './shared/fakeDocument'
import { depositToWallet } from './wallet/depositToWallet'
import { signCapitalAgreement } from './capital/signCapitalAgreement'
import { addAuthor } from './capital/addAuthor'
import { getSegment } from './capital/getSegment'
import { investInProject } from './capital/investInProject'
import { processLastDecision } from './soviet/processLastDecision'
import { processDebt } from './capital/processDebt'
import { processCreateProjectProperty } from './capital/processCreateProjectProperty'
import { processCreateProgramProperty } from './capital/processCreateProgramProperty'
import { processStartVoting } from './capital/processStartVoting'
import { createVoteDistribution, submitVote } from './capital/submitVote'
import { processCompleteVoting } from './capital/processCompleteVoting'
import { processCalculateVotes } from './capital/processCalculateVotes'

// const CLI_PATH = 'src/index.ts'

const blockchain = new Blockchain(config.network, config.private_keys)
let project1: CapitalContract.Actions.CreateProject.ICreateProject
let _project2: CapitalContract.Actions.CreateProject.ICreateProject
let _project3: CapitalContract.Actions.CreateProject.ICreateProject

let tester1: string
let tester2: string
let tester3: string
let tester4: string
let tester5: string

let investor1: string
let investor2: string
let investor3: string
// let result1: CapitalContract.Actions.CreateResult.ICreateResult
// let result2: CapitalContract.Actions.CreateResult.ICreateResult
// let result3: CapitalContract.Actions.CreateResult.ICreateResult

const commits: string[] = []
const tester1CommitHours = 10
const tester2CommitHours = 20
const tester3CommitHours = 100
const investAmount1 = 100000
const investAmount2 = 25000
const investAmount3 = 25000
beforeAll(async () => {
  await blockchain.update_pass_instance()

  investor1 = generateRandomUsername()
  console.log('investor1: ', investor1)
  await addUser(investor1)

  tester1 = generateRandomUsername()
  console.log('tester1: ', tester1)
  await addUser(tester1)

  tester2 = generateRandomUsername()
  console.log('tester2: ', tester2)
  await addUser(tester2)

  tester3 = generateRandomUsername()
  console.log('tester3: ', tester3)
  await addUser(tester3)

  tester4 = generateRandomUsername()
  console.log('tester4: ', tester4)
  await addUser(tester4)

  tester5 = generateRandomUsername()
  console.log('tester5: ', tester5)
  await addUser(tester5)

  investor2 = generateRandomUsername()
  console.log('investor2: ', investor2)
  await addUser(investor2, tester4)

  investor3 = generateRandomUsername()
  console.log('investor3: ', investor3)
  await addUser(investor3, tester5)

  // const { stdout } = await execa('esno', [CLI_PATH, 'boot'], { stdio: 'inherit' })
  // expect(stdout).toContain('Boot process completed')
}, 500_000)

afterAll(() => {
  console.log('\nüìä **RAM USAGE SUMMARY** üìä')
  let totalGlobalRam = 0

  for (const [key, ramUsed] of Object.entries(globalRamStats)) {
    const ramKb = (ramUsed / 1024).toFixed(2)
    console.log(`  ${key} = ${ramKb} kb`)
    totalGlobalRam += ramUsed
  }

  console.log(`\nüíæ **TOTAL RAM USED IN TESTS**: ${(totalGlobalRam / 1024).toFixed(2)} kb\n`)

  console.log(`tester1: ${tester1}\ntester2: ${tester2}\ntester3: ${tester3}\ntester4: ${tester4}\ntester5: ${tester5}\ninvestor1: ${investor1}\ninvestor2: ${investor2}\ninvestor3: ${investor3}`)
})

describe('—Ç–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ CAPITAL', () => {
  it('—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', async () => {
    const program = await getCoopProgramWallet(blockchain, 'voskhod', sourceProgramId)
    if (!program) {
      const data: SovietContract.Actions.Programs.CreateProgram.ICreateProgram = {
        coopname: 'voskhod',
        is_can_coop_spend_share_contributions: true,
        username: 'ant',
        title: '–î–æ–≥–æ–≤–æ—Ä –£–•–î',
        announce: '',
        description: '',
        preview: '',
        images: '',
        calculation_type: 'free',
        fixed_membership_contribution: '0.0000 RUB',
        membership_percent_fee: '0',
        meta: '',
        type: 'source',
      }

      const result = await blockchain.api.transact(
        {
          actions: [
            {
              account: SovietContract.contractName.production,
              name: SovietContract.Actions.Programs.CreateProgram.actionName,
              authorization: [
                {
                  actor: 'ant',
                  permission: 'active',
                },
              ],
              data,
            },
          ],
        },
        {
          blocksBehind: 3,
          expireSeconds: 30,
        },
      )
      getTotalRamUsage(result)
      expect(result.transaction_id).toBeDefined()
    }
  })

  it('—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏', async () => {
    const program = await getCoopProgramWallet(blockchain, 'voskhod', capitalProgramId)

    if (!program) {
      const data: SovietContract.Actions.Programs.CreateProgram.ICreateProgram = {
        coopname: 'voskhod',
        is_can_coop_spend_share_contributions: false,
        username: 'ant',
        title: '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
        announce: '',
        description: '',
        preview: '',
        images: '',
        calculation_type: 'free',
        fixed_membership_contribution: '0.0000 RUB',
        membership_percent_fee: '0',
        meta: '',
        type: 'capital',
      }

      const result = await blockchain.api.transact(
        {
          actions: [
            {
              account: SovietContract.contractName.production,
              name: SovietContract.Actions.Programs.CreateProgram.actionName,
              authorization: [
                {
                  actor: 'ant',
                  permission: 'active',
                },
              ],
              data,
            },
          ],
        },
        {
          blocksBehind: 3,
          expireSeconds: 30,
        },
      )
      getTotalRamUsage(result)
      expect(result.transaction_id).toBeDefined()
    }
  })

  it('–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç CAPITAL –∏ —Å–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥', async () => {
    const data: CapitalContract.Actions.SetConfig.ISetConfig = {
      coopname: 'voskhod',
      config: {
        coordinator_bonus_percent: 4,
        expense_pool_percent: 100,
        coordinator_invite_validity_days: 30,
        voting_period_in_days: 7,
        authors_voting_percent: 38.2,
        creators_voting_percent: 38.2,
      },
    }

    const result = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.SetConfig.actionName,
            authorization: [
              {
                actor: 'voskhod',
                permission: 'active',
              },
            ],
            data,
          },
        ],
      },
      {
        blocksBehind: 3,
        expireSeconds: 30,
      },
    )
    getTotalRamUsage(result)
    expect(result.transaction_id).toBeDefined()

    const state = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      CapitalContract.contractName.production,
      'state',
      1,
      'voskhod',
      'voskhod',
    ))[0]
    console.log('state: ', state)
    expect(state).toBeDefined()
    expect(state.coopname).toBe('voskhod')
    expect(parseFloat(state.config.coordinator_bonus_percent)).toBe(data.config.coordinator_bonus_percent)
    expect(parseFloat(state.config.expense_pool_percent)).toBe(data.config.expense_pool_percent)
    expect(parseFloat(state.config.coordinator_invite_validity_days)).toBe(data.config.coordinator_invite_validity_days)
    expect(parseFloat(state.config.voting_period_in_days)).toBe(data.config.voting_period_in_days)
    expect(parseFloat(state.config.authors_voting_percent)).toBe(data.config.authors_voting_percent)
    expect(parseFloat(state.config.creators_voting_percent)).toBe(data.config.creators_voting_percent)
  })

  it('—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç', async () => {
    const hash = generateRandomSHA256()
    const parentHash = '0000000000000000000000000000000000000000000000000000000000000000'

    const data: CapitalContract.Actions.CreateProject.ICreateProject = {
      coopname: 'voskhod',
      project_hash: hash,
      parent_hash: parentHash,
      title: `–ò–¥–µ—è ${hash.slice(0, 10)}`,
      description: `–û–ø–∏—Å–∞–Ω–∏–µ ${hash.slice(0, 10)}`,
      meta: '',
    }

    project1 = data

    const result = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.CreateProject.actionName,
            authorization: [
              {
                actor: 'voskhod',
                permission: 'active',
              },
            ],
            data,
          },
        ],
      },
      {
        blocksBehind: 3,
        expireSeconds: 30,
      },
    )

    expect(result.transaction_id).toBeDefined()

    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    expect(project).toBeDefined()
    console.log('project: ', project)
    expect(project.coopname).toBe('voskhod')
    expect(project.status).toBe('pending')
    // –ü–ª–∞–Ω/—Ñ–∞–∫—Ç –∏ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    expect(project.plan.target_expense_pool).toBe('0.0000 RUB')
    expect(project.fact.target_expense_pool).toBe('0.0000 RUB')
    expect(project.fact.accumulated_expense_pool).toBe('0.0000 RUB')
    expect(project.fact.used_expense_pool).toBe('0.0000 RUB')
    expect(project.fact.invest_pool).toBe('0.0000 RUB')
    expect(project.counts.total_authors).toBe(0)
    expect(project.counts.total_creators).toBe(0)
    expect(project.counts.total_investors).toBe(0)
    expect(project.counts.total_contributors).toBe(0)
    expect(project.counts.total_commits).toBe(0)
    expect(project.project_hash).toBe(data.project_hash)
    expect(project.title).toBe(data.title)
    expect(project.description).toBe(data.description)
    getTotalRamUsage(result)
  })

  it('–∑–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä –£–•–î –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –¥–æ–≥–æ–≤–æ—Ä—É —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', async () => {
    const testerNames = [tester1, tester2, tester3, tester4, tester5, investor1, investor2, investor3]
    for (const tester of testerNames) {
      const appendixHash = generateRandomSHA256()
      const contributorHash = generateRandomSHA256()
      await registerContributor(blockchain, 'voskhod', tester, contributorHash, '1000.0000 RUB')
      await signAppendix(blockchain, 'voskhod', tester, project1.project_hash, appendixHash)
      const contributor = (await blockchain.getTableRows(
        CapitalContract.contractName.production,
        'voskhod',
        'contributors',
        1,
        tester,
        tester,
        2,
        'i64',
      ))[0]
      expect(contributor).toBeDefined()
      expect(contributor.appendixes).toContain(project1.project_hash)
      expect(contributor.status).toBe('active')
    }
  }, 1000_000)

  it(`–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ –¶–ü–ü "–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–æ—à–µ–ª–µ–∫" –∏ "–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è"`, async () => {
    const testerNames = [tester1, tester2, tester3, tester4, tester5, investor1, investor2, investor3] // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    for (const tester of testerNames) {
      await signWalletAgreement(blockchain, 'voskhod', tester, fakeDocument)
      await signCapitalAgreement(blockchain, 'voskhod', tester, fakeDocument)
    }
  }, 1000_000)

  it(`–ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ investor1`, async () => {
    const { depositId, program, userWallet } = await depositToWallet(blockchain, 'voskhod', investor1, investAmount1)
  })

  it(`–ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ investor2`, async () => {
    const { depositId, program, userWallet } = await depositToWallet(blockchain, 'voskhod', investor2, investAmount2 * 2)
  })

  it(`–ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ investor3`, async () => {
    const { depositId, program, userWallet } = await depositToWallet(blockchain, 'voskhod', investor3, investAmount3)
  })

  it('–¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É', async () => {
    const data: CapitalContract.Actions.SetMaster.ISetMaster = {
      coopname: 'voskhod',
      project_hash: project1.project_hash,
      master: tester1,
    }

    const result = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.SetMaster.actionName,
            authorization: [
              {
                actor: 'voskhod',
                permission: 'active',
              },
            ],
            data,
          },
        ],
      },
      {
        blocksBehind: 3,
        expireSeconds: 30,
      },
    )
    getTotalRamUsage(result)
    expect(result.transaction_id).toBeDefined()

    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    expect(project).toBeDefined()
    console.log('project: ', project)
    expect(project.master).toBe(tester1)
  })

  it('–¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫ –∏–¥–µ–µ', async () => {
    const { project, segment } = await addAuthor(blockchain, 'voskhod', project1.project_hash, tester1)

    console.log('segment: ', segment)
    expect(segment).toBeDefined()
    expect(segment.username).toBe(tester1)
    expect(segment.project_hash).toBe(project1.project_hash)
    expect(segment.is_author).toBe(1)
    expect(segment.is_creator).toBe(0)
    expect(segment.is_coordinator).toBe(0)
    expect(segment.is_investor).toBe(0)
    expect(segment.is_contributor).toBe(0)
    expect(segment.is_coordinator).toBe(0)
    expect(segment.is_investor).toBe(0)
    expect(segment.is_contributor).toBe(0)
    expect(project).toBeDefined()
    expect(project.counts.total_authors).toBe(1)
  })

  it('—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞', async () => {
    const data: CapitalContract.Actions.SetPlan.ISetPlan = {
      coopname: 'voskhod',
      master: tester1,
      project_hash: project1.project_hash,
      plan_creators_hours: 100,
      plan_expenses: '10000.0000 RUB',
      plan_hour_cost: '1000.0000 RUB',
    }

    const result = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.SetPlan.actionName,
            authorization: [
              {
                actor: 'voskhod',
                permission: 'active',
              },
            ],
            data,
          },
        ],
      },
      {
        blocksBehind: 3,
        expireSeconds: 30,
      },
    )
    getTotalRamUsage(result)
    expect(result.transaction_id).toBeDefined()

    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    expect(project).toBeDefined()
    console.log('plan: ', project.plan)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º—É–ª–∞–º –∏–∑ generation.cpp
    expect(project.plan.hour_cost).toBe('1000.0000 RUB')
    expect(parseInt(project.plan.creators_hours)).toBe(100)
    expect(project.plan.target_expense_pool).toBe('10000.0000 RUB')

    // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–º–∏–∏
    expect(project.plan.creators_base_pool).toBe('100000.0000 RUB')
    expect(project.plan.authors_base_pool).toBe('61800.0000 RUB')
    expect(project.plan.coordinators_base_pool).toBe('6872.0000 RUB')
    expect(project.plan.creators_bonus_pool).toBe('100000.0000 RUB')
    expect(project.plan.authors_bonus_pool).toBe('61800.0000 RUB')

    // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞
    expect(project.plan.invest_pool).toBe('168672.0000 RUB')
    expect(project.plan.total_received_investments).toBe('178672.0000 RUB')
    expect(project.plan.coordinators_investment_pool).toBe('178672.0000 RUB')
    expect(parseFloat(project.plan.return_base_percent)).toBeCloseTo(100, 10)
    expect(parseFloat(project.plan.use_invest_percent)).toBeCloseTo(100, 10)

    // –ò—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –±–æ–Ω—É—Å—ã –≤–∫–ª–∞–¥—á–∏–∫–æ–≤ –∏ –æ–±—â–∞—è —Å—É–º–º–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
    expect(project.plan.total_generation_pool).toBe('330472.0000 RUB')
    expect(project.plan.contributors_bonus_pool).toBe('534703.6960 RUB')
    expect(project.plan.total).toBe('875175.6960 RUB')
  })

  it('—Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø—Ä–∏—ë–º –∫–æ–º–º–∏—Ç–æ–≤', async () => {
    const data: CapitalContract.Actions.StartProject.IStartProject = {
      coopname: 'voskhod',
      project_hash: project1.project_hash,
    }
    const tx = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.StartProject.actionName,
            authorization: [{ actor: 'voskhod', permission: 'active' }],
            data,
          },
        ],
      },
      { blocksBehind: 3, expireSeconds: 30 },
    )
    getTotalRamUsage(tx)
    expect(tx.transaction_id).toBeDefined()

    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]
    expect(project).toBeDefined()
    expect(project.status).toBe('active')
  })

  it('–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è tester1 –Ω–∞ 10 —á–∞—Å–æ–≤ –ø–æ 1000 RUB', async () => {
    const { finalProject, commitHash, commit } = await commitToResult(blockchain, 'voskhod', project1.project_hash, tester1, tester1CommitHours)
    commits.push(commitHash)

    console.log('commit: ', commit)
    console.log('project fact: ', finalProject.fact)
    expect(finalProject.fact.creators_hours).toBe(10)
    expect(finalProject.fact.creators_base_pool).toBe('10000.0000 RUB')
    expect(finalProject.fact.creators_bonus_pool).toBe('10000.0000 RUB')
    expect(finalProject.fact.authors_bonus_pool).toBe('6180.0000 RUB')
    expect(finalProject.fact.total_generation_pool).toBe('32360.0000 RUB')
    expect(finalProject.fact.contributors_bonus_pool).toBe('52358.4800 RUB')
    expect(finalProject.fact.total).toBe('84718.4800 RUB')
  })

  it('–æ–±–Ω–æ–≤–∏—Ç—å CRPS –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞', async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç tester1 —á–µ—Ä–µ–∑ CRPS
    const { prevSegment, updatedSegment } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester1)

    console.log('–°–µ–≥–º–µ–Ω—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', prevSegment)
    console.log('–°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedSegment)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å—å –ø—É–ª –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è –æ–¥–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É
    // –í –ø—Ä–æ–µ–∫—Ç–µ authors_bonus_pool = '6180.0000 RUB' –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –≤ author_bonus
    expect(updatedSegment.author_bonus).toBe('6180.0000 RUB')

    // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∞–≤—Ç–æ—Ä–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    // –ò–∑ —Ñ–æ—Ä–º—É–ª—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: base_bonus_coefficient * authors_bonus_pool / total_authors = 1.0 * 6180 / 1 = 6180
    expect(updatedSegment.author_base).toBe('6180.0000 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_author = true
    expect(updatedSegment.is_author).toBe(1)

    console.log(`‚úÖ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: base=${updatedSegment.author_base}, bonus=${updatedSegment.author_bonus}`)
  })

  it('–¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ tester2 –∫ –∏–¥–µ–µ', async () => {
    const { project, segment } = await addAuthor(blockchain, 'voskhod', project1.project_hash, tester2)

    console.log('segment tester2: ', segment)
    expect(segment).toBeDefined()
    expect(segment.username).toBe(tester2)
    expect(segment.project_hash).toBe(project1.project_hash)
    expect(segment.is_author).toBe(1)
    expect(segment.is_creator).toBe(0)
    expect(segment.is_coordinator).toBe(0)
    expect(segment.is_investor).toBe(0)
    expect(segment.is_contributor).toBe(0)
    expect(project).toBeDefined()
    expect(project.counts.total_authors).toBe(2) // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å 2 –∞–≤—Ç–æ—Ä–∞
  })

  it('–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è tester2 –Ω–∞ 20 —á–∞—Å–æ–≤ –ø–æ 1000 RUB', async () => {
    const { finalProject, commitHash, commit } = await commitToResult(blockchain, 'voskhod', project1.project_hash, tester2, tester2CommitHours)
    commits.push(commitHash)

    console.log('commit tester2: ', commit)
    console.log('project fact after tester2 commit: ', finalProject.fact)

    expect(commit.amounts.creators_base_pool).toBe('20000.0000 RUB')
    expect(commit.amounts.creators_bonus_pool).toBe('20000.0000 RUB')
    expect(commit.amounts.authors_bonus_pool).toBe('12360.0000 RUB')
    expect(commit.amounts.authors_base_pool).toBe('12360.0000 RUB')
    expect(commit.amounts.total_generation_pool).toBe('64720.0000 RUB')
    expect(commit.amounts.contributors_bonus_pool).toBe('104716.9600 RUB')
    expect(commit.amounts.total_contribution).toBe('169436.9600 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–≤—É—Ö –∫–æ–º–º–∏—Ç–æ–≤ (10 + 20 = 30 —á–∞—Å–æ–≤)
    expect(finalProject.fact.creators_hours).toBe(30)
    expect(finalProject.fact.creators_base_pool).toBe('30000.0000 RUB')
    expect(finalProject.fact.creators_bonus_pool).toBe('30000.0000 RUB')
    expect(finalProject.fact.authors_bonus_pool).toBe('18540.0000 RUB')
    expect(finalProject.fact.total_generation_pool).toBe('97080.0000 RUB')
    expect(finalProject.fact.contributors_bonus_pool).toBe('157075.4400 RUB')
    expect(finalProject.fact.total).toBe('254155.4400 RUB')
  })

  it('–æ–±–Ω–æ–≤–∏—Ç—å CRPS –¥–ª—è –æ–±–æ–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥', async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç tester1 —á–µ—Ä–µ–∑ CRPS
    await sleep(1000) // —Ç.–∫. —Ä–∞–Ω–µ–µ –º—ã –¥–µ–ª–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –±—É–¥–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
    const { prevSegment: prevTester1, updatedSegment: updatedTester1 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester1)
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç tester2 —á–µ—Ä–µ–∑ CRPS
    const { prevSegment: prevTester2, updatedSegment: updatedTester2 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester2)

    // console.log('Tester1 - —Å–µ–≥–º–µ–Ω—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', prevTester1)
    // console.log('Tester1 - —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedTester1)
    // console.log('Tester2 - —Å–µ–≥–º–µ–Ω—Ç –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', prevTester2)
    // console.log('Tester2 - —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedTester2)

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ authors_bonus_pool
    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    console.log('Current project authors_bonus_pool:', project.fact.authors_bonus_pool)

    // –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏–π –ø—É–ª —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 18540 RUB, –ø—Ä–∏—Ä–æ—Å—Ç —Å–æ—Å—Ç–∞–≤–∏–ª 12360 RUB
    // –û–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –¥–≤—É–º—è –∞–≤—Ç–æ—Ä–∞–º–∏: 12360 / 2 = 6180 RUB –∫–∞–∂–¥–æ–º—É

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º tester1 (—É –Ω–µ–≥–æ –±—ã–ª–∞ –Ω–∞–≥—Ä–∞–¥–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ + –¥–æ–ª—è –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ)
    // tester1 –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å: 6180 (–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞) + 6180 (–¥–æ–ª—è –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ) = 12360
    // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—É–ª–∞, –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç 12360 = 6180
    expect(updatedTester1.author_bonus).toBe('12360.0000 RUB')
    expect(updatedTester1.author_base).toBe('12360.0000 RUB')
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –∫ —Å—Å—É–¥–µ —Ä–∞–≤–Ω–∞ 0 —Ç.–∫. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ—Ç
    expect(updatedTester1.provisional_amount).toBe('0.0000 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º tester2 (–ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é –¥–æ–ª—é –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø—É–ª–∞)
    expect(updatedTester2.author_bonus).toBe('6180.0000 RUB')
    expect(updatedTester2.author_base).toBe('6180.0000 RUB')
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –∫ —Å—Å—É–¥–µ —Ä–∞–≤–Ω–∞ 0 —Ç.–∫. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ—Ç
    expect(updatedTester2.provisional_amount).toBe('0.0000 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ—Ä–∞–º–∏
    expect(updatedTester1.is_author).toBe(1)
    expect(updatedTester2.is_author).toBe(1)

    console.log(`‚úÖ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É –¥–≤—É–º—è –∞–≤—Ç–æ—Ä–∞–º–∏:`)
    console.log(`   tester1: base=${updatedTester1.author_base}, bonus=${updatedTester1.author_bonus}`)
    console.log(`   tester2: base=${updatedTester2.author_base}, bonus=${updatedTester2.author_bonus}`)
  })

  it('–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–∞–π—â–∏–∫–∞ —è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ—Ä–∞–º–∏ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏', async () => {
    const segment1 = await getSegment(blockchain, 'voskhod', project1.project_hash, tester1)
    const segment2 = await getSegment(blockchain, 'voskhod', project1.project_hash, tester2)
    expect(segment1.is_author).toBe(1)
    expect(segment2.is_author).toBe(1)
    expect(segment1.is_creator).toBe(1)
    expect(segment2.is_creator).toBe(1)
  })

  it('–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', async () => {
    const data: CapitalContract.Actions.OpenProject.IOpenProject = {
      coopname: 'voskhod',
      project_hash: project1.project_hash,
    }
    const result = await blockchain.api.transact(
      {
        actions: [
          {
            account: CapitalContract.contractName.production,
            name: CapitalContract.Actions.OpenProject.actionName,
            authorization: [{ actor: 'voskhod', permission: 'active' }],
            data,
          },
        ],
      },
      { blocksBehind: 3, expireSeconds: 30 },
    )

    const project = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]
    console.log('project: ', project)
    expect(project).toBeDefined()
    expect(project.is_opened).toBe(1)
    expect(project.fact.target_expense_pool).toBe('10000.0000 RUB')
    expect(project.fact.accumulated_expense_pool).toBe('0.0000 RUB')
    expect(project.fact.used_expense_pool).toBe('0.0000 RUB')
  })

  it('–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º investor1 –Ω–∞ 100000 RUB', async () => {
    fakeDocument.signatures[0].signer = investor1
    const { project, transactionId } = await investInProject(blockchain, 'voskhod', investor1, project1.project_hash, `${investAmount1}.0000 RUB`, fakeDocument)
    expect(project).toBeDefined()
    expect(transactionId).toBeDefined()
    expect(project.fact.total_received_investments).toBe('100000.0000 RUB')
    expect(project.fact.invest_pool).toBe('90000.0000 RUB')
    expect(project.fact.accumulated_expense_pool).toBe('10000.0000 RUB')
    expect(parseFloat(project.fact.use_invest_percent)).toBeCloseTo(58.54, 1)
    expect(parseFloat(project.fact.return_base_percent)).toBeCloseTo(100, 1)
  })

  it('–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã tester1, tester2 –∏ investor1 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –¥–ª—è —Å—Å—É–¥', async () => {
    await sleep(1000)

    const { prevSegment: prevTester1, updatedSegment: updatedTester1 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester1)
    const { prevSegment: prevTester2, updatedSegment: updatedTester2 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester2)
    const { prevSegment: prevInvestor1, updatedSegment: updatedInvestor1 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, investor1)

    console.log('updatedTester1: ', updatedTester1)
    console.log('updatedTester2: ', updatedTester2)
    console.log('updatedInvestor1: ', updatedInvestor1)

    expect(updatedTester1.provisional_amount).toBe('22360.0000 RUB')
    expect(updatedTester2.provisional_amount).toBe('26180.0000 RUB')
    expect(updatedInvestor1.provisional_amount).toBe('0.0000 RUB')
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–∞–≤–Ω–∞ 100000 RUB
    expect(updatedInvestor1.investor_amount).toBe('100000.0000 RUB')
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–∞–≤–Ω–∞ 58540 RUB
    expect(updatedInvestor1.investor_base).toBe('58540.0000 RUB')
  })

  it('tester3 –≤–Ω–æ—Å–∏—Ç 100000 RUB –∫–æ–º–º–∏—Ç–æ–º –∏ –¥–µ–ª–∞–µ—Ç —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è', async () => {
    const { finalProject, commitHash, commit } = await commitToResult(blockchain, 'voskhod', project1.project_hash, tester3, tester3CommitHours)
    commits.push(commitHash)

    console.log('commit tester3: ', commit)
    console.log('project fact after tester3 commit: ', finalProject.fact)

    expect(finalProject.fact.creators_hours).toBe(130)
    expect(finalProject.fact.creators_base_pool).toBe('130000.0000 RUB')
    expect(finalProject.fact.creators_bonus_pool).toBe('130000.0000 RUB')
    expect(finalProject.fact.authors_base_pool).toBe('80340.0000 RUB')
    expect(finalProject.fact.authors_bonus_pool).toBe('80340.0000 RUB')
    expect(finalProject.fact.total_generation_pool).toBe('420680.0000 RUB')
    expect(finalProject.fact.contributors_bonus_pool).toBe('680660.2400 RUB')
    expect(finalProject.fact.total).toBe('1101340.2400 RUB')

    expect(parseFloat(finalProject.fact.use_invest_percent)).toBeCloseTo(100, 1)
    expect(parseFloat(finalProject.fact.return_base_percent)).toBeCloseTo(42.78, 1)

    await sleep(1000)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    const { prevSegment: prevTester1, updatedSegment: updatedTester1 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester1)
    const { prevSegment: prevTester2, updatedSegment: updatedTester2 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester2)
    const { prevSegment: prevInvestor1, updatedSegment: updatedInvestor1 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, investor1)

    // console.log('prevTester2: ', prevTester2)
    // console.log('updatedTester2: ', updatedTester2)
    // console.log('updatedInvestor1: ', updatedInvestor1)

    expect(updatedTester1.provisional_amount).toBe('22788.8181 RUB')
    expect(updatedTester2.provisional_amount).toBe('24423.3146 RUB')
    expect(updatedInvestor1.provisional_amount).toBe('0.0000 RUB')
    expect(updatedInvestor1.investor_base).toBe('100000.0000 RUB')
    expect(updatedInvestor1.investor_amount).toBe('100000.0000 RUB')
  })

  it('–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º investor2 –Ω–∞ 25000 RUB —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º tester4', async () => {
    fakeDocument.signatures[0].signer = investor2
    const { project, prevProject, transactionId } = await investInProject(blockchain, 'voskhod', investor2, project1.project_hash, `${investAmount2}.0000 RUB`, fakeDocument)
    expect(project).toBeDefined()
    expect(transactionId).toBeDefined()
    // console.log('prevProject: ', prevProject)
    // console.log('project: ', project)
    expect(project.counts.total_coordinators).toBe(1)
    expect(project.fact.coordinators_investment_pool).toBe('25000.0000 RUB')
    expect(project.fact.coordinators_base_pool).toBe('961.5384 RUB')
    expect(project.fact.total_received_investments).toBe('125000.0000 RUB')
    expect(parseFloat(project.fact.return_base_percent)).toBeCloseTo(54.42, 1)
    expect(parseFloat(project.fact.use_invest_percent)).toBeCloseTo(100, 1)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    const { prevSegment: prevTester4, updatedSegment: updatedTester4 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester4)
    expect(updatedTester4.provisional_amount).toBe('523.3133 RUB')
    expect(updatedTester4.coordinator_base).toBe('961.5384 RUB')
    expect(updatedTester4.is_coordinator).toBe(1)
    expect(updatedTester4.coordinator_investments).toBe('25000.0000 RUB')

    console.log('updatedTester4: ', updatedTester4)

    const { prevSegment: prevInvestor2, updatedSegment: updatedInvestor2 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, investor2)
    console.log('updatedInvestor2: ', updatedInvestor2)
    expect(updatedInvestor2.provisional_amount).toBe('0.0000 RUB')
    expect(updatedInvestor2.investor_base).toBe('25000.0000 RUB')
    expect(updatedInvestor2.investor_amount).toBe('25000.0000 RUB')
  })

  it('–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–º investor3 –µ—â–µ –Ω–∞ 25000 RUB —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º tester5', async () => {
    fakeDocument.signatures[0].signer = investor3
    const { project, prevProject, transactionId } = await investInProject(blockchain, 'voskhod', investor3, project1.project_hash, `${investAmount3}.0000 RUB`, fakeDocument)
    expect(project).toBeDefined()
    expect(transactionId).toBeDefined()
    // console.log('prevProject: ', prevProject)
    console.log('project: ', project)
    expect(project.counts.total_coordinators).toBe(2)
    expect(project.fact.coordinators_investment_pool).toBe('50000.0000 RUB')
    expect(project.fact.coordinators_base_pool).toBe('1923.0768 RUB')
    expect(project.fact.total_received_investments).toBe('150000.0000 RUB')
    expect(parseFloat(project.fact.return_base_percent)).toBeCloseTo(65.9558, 1)
    expect(parseFloat(project.fact.use_invest_percent)).toBeCloseTo(100, 1)

    const { prevSegment: prevTester5, updatedSegment: updatedTester5 } = await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester5)
    // console.log('updatedTester5: ', updatedTester5)
    expect(updatedTester5.provisional_amount).toBe('634.1912 RUB')
    expect(updatedTester5.coordinator_base).toBe('961.5384 RUB')
    expect(updatedTester5.is_coordinator).toBe(1)
    expect(updatedTester5.coordinator_investments).toBe('25000.0000 RUB')
  })

  it(`–±–µ—Ä–µ–º —Å—Å—É–¥—É –Ω–∞ 10000 RUB –æ—Ç tester1`, async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Å—É–¥—ã
    await sleep(1000)
    await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester1)
    const repaidAtDate = new Date()
    repaidAtDate.setDate(repaidAtDate.getDate() + 30)

    // –ü—Ä–æ—Ü–µ—Å—Å–∏–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–∞
    const debtResult = await processDebt(
      blockchain,
      'voskhod',
      tester1,
      project1.project_hash,
      '10000.0000 RUB',
      fakeDocument,
      repaidAtDate,
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ debt_amount —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 10000.0000 RUB –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
    expect(debtResult.segmentAfter.debt_amount).toBe('10000.0000 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ debt_amount —É–≤–µ–ª–∏—á–∏–ª—Å—è —É –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞
    expect(debtResult.contributorAfter.debt_amount).toBe('10000.0000 RUB')

    console.log(`‚úÖ –î–æ–ª–≥ –Ω–∞ 10000.0000 RUB —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${tester1}`)
  })

  it('–≤–Ω–µ—Å—Ç–∏ –∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ 10000 RUB –≤ –ø—Ä–æ–µ–∫—Ç –æ—Ç tester4', async () => {
    const data: CapitalContract.Actions.CreateProjectProperty.ICreateProjectProperty = {
      coopname: 'voskhod',
      username: tester4,
      project_hash: project1.project_hash,
      property_hash: generateRandomSHA256(),
      property_amount: '10000.0000 RUB',
      property_description: '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ',
    }

    const res = await processCreateProjectProperty(blockchain, data)
    const prevTotalCost = parseFloat(res.segmentBefore.total_segment_cost)

    expect(res.segmentAfter.total_segment_cost).not.toBe(res.segmentBefore.total_segment_cost)
    expect(parseFloat(res.segmentAfter.total_segment_cost)).toBeGreaterThan(prevTotalCost)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ
    const prevContributedAsPropertor = parseFloat(res.segmentBefore.property_base.split(' ')[0])
    const afterContributedAsPropertor = parseFloat(res.segmentAfter.property_base.split(' ')[0])
    expect(afterContributedAsPropertor).toBe(prevContributedAsPropertor + 10000)

    const programWalletBefore = await getCoopProgramWallet(blockchain, 'voskhod', capitalProgramId)
  })

  it('–≤–Ω–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –Ω–∞ 10000 RUB –æ—Ç tester5 –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø–∞–µ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞', async () => {
    const programWalletBefore = await getCoopProgramWallet(blockchain, 'voskhod', capitalProgramId)
    const ledgerShareBefore = await getLedgerAccountById(blockchain, 'voskhod', circulationAccountId)

    const data: CapitalContract.Actions.CreateProgramProperty.ICreateProgramProperty = {
      coopname: 'voskhod',
      username: tester5,
      property_hash: generateRandomSHA256(),
      property_amount: '10000.0000 RUB',
      property_description: '–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å',
      statement: fakeDocument,
    }

    const res = await processCreateProgramProperty(blockchain, data, fakeDocument)
    expect(res.txCreateId).toBeDefined()
    expect(res.txAct1Id).toBeDefined()
    expect(res.txAct2Id).toBeDefined()

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ
    // console.log('Program wallet before:', res.programWalletBefore)
    // console.log('Program wallet after:', res.programWalletAfter)
    // console.log('Ledger share before:', res.ledgerShareBefore)
    // console.log('Ledger share after:', res.ledgerShareAfter)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ: –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã +10000.0000 RUB
    const prevBlocked = parseFloat(res.programWalletBefore.blocked.split(' ')[0])
    const afterBlocked = parseFloat(res.programWalletAfter.blocked.split(' ')[0])
    expect(afterBlocked).toBe(prevBlocked + 10000)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ: –ø–∞–µ–≤–æ–π —Ñ–æ–Ω–¥ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ +10000.0000 RUB
    const prevAvailable = parseFloat(res.ledgerShareBefore.available.split(' ')[0])
    const afterAvailable = parseFloat(res.ledgerShareAfter.available.split(' ')[0])
    expect(afterAvailable).toBe(prevAvailable + 10000)
  })

  it('–≤–Ω–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–π –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –Ω–∞ 10000 RUB –æ—Ç tester5 –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞', async () => {
    const data: CapitalContract.Actions.CreateProjectProperty.ICreateProjectProperty = {
      coopname: 'voskhod',
      username: tester5,
      property_hash: generateRandomSHA256(),
      property_amount: '10000.0000 RUB',
      property_description: '–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å',
      project_hash: project1.project_hash,
    }

    const res = await processCreateProjectProperty(blockchain, data)
    expect(res.txCreateId).toBeDefined()

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ
    // console.log('Segment before:', res.segmentBefore)
    // console.log('Segment after:', res.segmentAfter)
    // console.log('Project before:', res.projectBefore)
    // console.log('Project after:', res.projectAfter)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ: –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∑–Ω–æ—Å –≤ —Å–µ–≥–º–µ–Ω—Ç–µ +10000.0000 RUB
    const prevProperty = parseFloat(res.segmentBefore.property_base.split(' ')[0])
    const afterProperty = parseFloat(res.segmentAfter.property_base.split(' ')[0])
    expect(afterProperty).toBe(prevProperty + 10000)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ: –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ +10000.0000 RUB
    const prevTotal = parseFloat(res.segmentBefore.total_segment_cost.split(' ')[0])
    const afterTotal = parseFloat(res.segmentAfter.total_segment_cost.split(' ')[0])
    expect(afterTotal).toBe(prevTotal + 10000)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–µ: –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ +10000.0000 RUB
    const prevPropertyBase = parseFloat(res.projectBefore.fact.property_base_pool.split(' ')[0])
    const afterPropertyBase = parseFloat(res.projectAfter.fact.property_base_pool.split(' ')[0])
    expect(afterPropertyBase).toBe(prevPropertyBase + 10000)
    expect(afterPropertyBase).toBe(20000)
  })

  it(`–±–µ—Ä–µ–º —Å—Å—É–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É 100 RUB –æ—Ç tester4`, async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Å—É–¥—ã
    await sleep(1000)
    await refreshSegment(blockchain, 'voskhod', project1.project_hash, tester4)
    const repaidAtDate = new Date()
    repaidAtDate.setDate(repaidAtDate.getDate() + 30)

    // –ü—Ä–æ—Ü–µ—Å—Å–∏–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–∞
    const debtResult = await processDebt(
      blockchain,
      'voskhod',
      tester4,
      project1.project_hash,
      '100.0000 RUB',
      fakeDocument,
      repaidAtDate,
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ debt_amount —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 10000.0000 RUB –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
    expect(debtResult.segmentAfter.debt_amount).toBe('100.0000 RUB')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ debt_amount —É–≤–µ–ª–∏—á–∏–ª—Å—è —É –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞
    expect(debtResult.contributorAfter.debt_amount).toBe('100.0000 RUB')

    console.log('debtResult tester4: ', debtResult)

    console.log(`‚úÖ –î–æ–ª–≥ –Ω–∞ 100 RUB —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${tester4}`)
  })

  it('–Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å active –Ω–∞ voting', async () => {
    const data: CapitalContract.Actions.StartVoting.IStartVoting = {
      coopname: 'voskhod',
      project_hash: project1.project_hash,
    }

    const res = await processStartVoting(blockchain, data)
    expect(res.txStartId).toBeDefined()

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ
    console.log('Project before:', res.projectBefore)
    console.log('Project after:', res.projectAfter)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å 'active' –Ω–∞ 'voting'
    expect(res.projectBefore.status).toBe('active')
    expect(res.projectAfter.status).toBe('voting')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    expect(res.projectAfter.voting.authors_voting_percent).toBeCloseTo(38.2, 10)
    expect(res.projectAfter.voting.creators_voting_percent).toBeCloseTo(38.2, 10)
    expect(res.projectAfter.voting.amounts.authors_equal_spread).toBe('49650.1200 RUB')
    expect(res.projectAfter.voting.amounts.creators_direct_spread).toBe('80340.0000 RUB')
    expect(res.projectAfter.voting.total_voters).toBe(3)
    expect(res.projectAfter.voting.votes_received).toBe(0)

    expect(parseFloat(res.projectAfter.fact.creators_bonus_pool)).toBeCloseTo(parseFloat(res.projectAfter.voting.amounts.creators_direct_spread) + parseFloat(res.projectAfter.voting.amounts.creators_bonuses_on_voting), 10)

    expect(parseFloat(res.projectAfter.fact.authors_bonus_pool)).toBeCloseTo(parseFloat(res.projectAfter.voting.amounts.authors_equal_spread) + parseFloat(res.projectAfter.voting.amounts.authors_bonuses_on_voting), 10)

    expect(res.projectAfter.voting.amounts.authors_equal_per_author).toBe('24825.0600 RUB')

    expect(parseFloat(res.projectAfter.voting.amounts.total_voting_pool)).toBeCloseTo(parseFloat(res.projectAfter.voting.amounts.creators_bonuses_on_voting) + parseFloat(res.projectAfter.voting.amounts.authors_bonuses_on_voting), 10)

    expect(res.projectAfter.voting.amounts.total_voting_pool).toBe('80349.8800 RUB')
    expect(res.projectAfter.voting.amounts.active_voting_amount).toBe('53566.5866 RUB')
  })

  it('–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–º tester1', async () => {
    const voters = [tester1, tester2, tester3]

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è active_voting_amount
    const currentProject = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    const votingAmount = currentProject.voting.amounts.active_voting_amount
    console.log('–ì–æ–ª–æ—Å—É—é—â–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', votingAmount)

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å—É—é—â–µ–π —Å—É–º–º—ã –º–µ–∂–¥—É –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    const voteDistribution = createVoteDistribution(voters, tester1, votingAmount)

    const result = await submitVote(
      blockchain,
      'voskhod',
      tester1,
      project1.project_hash,
      voteDistribution,
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    expect(result.txId).toBeDefined()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    expect(result.projectAfter.voting.votes_received).toBe(result.projectBefore.voting.votes_received + 1)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    expect(result.votesAfter.length).toBe(result.votesBefore.length + 2)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤, –∞ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å
    expect(result.voterVotesBefore.length).toBe(0)
    expect(result.voterVotesAfter.length).toBe(2)

    console.log('VOTING RESULT tester1: ', result)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–æ–ª–æ—Å–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
    result.voterVotesAfter.forEach((vote: any) => {
      expect(vote.voter).toBe(tester1)
      expect(vote.project_hash).toBe(project1.project_hash)
      const expectedVote = result.voteInput.find(v => v.recipient === vote.recipient)
      expect(expectedVote).toBeDefined()
      expect(vote.amount).toBe(expectedVote!.amount)
    })
  })

  it('–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–º tester2', async () => {
    const voters = [tester1, tester2, tester3]

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è active_voting_amount
    const currentProject = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    const votingAmount = currentProject.voting.amounts.active_voting_amount

    const voteDistribution = createVoteDistribution(voters, tester2, votingAmount)

    const result = await submitVote(
      blockchain,
      'voskhod',
      tester2,
      project1.project_hash,
      voteDistribution,
    )

    expect(result.txId).toBeDefined()
    expect(result.projectAfter.voting.votes_received).toBe(result.projectBefore.voting.votes_received + 1)
    expect(result.votesAfter.length).toBe(result.votesBefore.length + 2)
    expect(result.voterVotesBefore.length).toBe(0)
    expect(result.voterVotesAfter.length).toBe(2)
  })

  it('–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–º tester3', async () => {
    const voters = [tester1, tester2, tester3]

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è active_voting_amount
    const currentProject = (await blockchain.getTableRows(
      CapitalContract.contractName.production,
      'voskhod',
      'projects',
      1,
      project1.project_hash,
      project1.project_hash,
      3,
      'sha256',
    ))[0]

    const votingAmount = currentProject.voting.amounts.active_voting_amount

    const voteDistribution = createVoteDistribution(voters, tester3, votingAmount)

    const result = await submitVote(
      blockchain,
      'voskhod',
      tester3,
      project1.project_hash,
      voteDistribution,
    )

    expect(result.txId).toBeDefined()
    expect(result.projectAfter.voting.votes_received).toBe(result.projectBefore.voting.votes_received + 1)
    expect(result.votesAfter.length).toBe(result.votesBefore.length + 2)
    expect(result.voterVotesBefore.length).toBe(0)
    expect(result.voterVotesAfter.length).toBe(2)
  })

  it('–∑–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å voting –Ω–∞ completed', async () => {
    const data: CapitalContract.Actions.CompleteVoting.ICompleteVoting = {
      coopname: 'voskhod',
      project_hash: project1.project_hash,
    }

    const result = await processCompleteVoting(blockchain, data)

    expect(result.txId).toBeDefined()
    expect(result.projectBefore.status).toBe('voting')
    expect(result.projectAfter.status).toBe('completed')
  })

  it('—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ tester1', async () => {
    const data: CapitalContract.Actions.CalculateVotes.IFinalVoting = {
      coopname: 'voskhod',
      username: tester1,
      project_hash: project1.project_hash,
    }

    const result = await processCalculateVotes(blockchain, data)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.equal_voting_amount), 2)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.total_voting_pool) / 3, 2)

    expect(result.txId).toBeDefined()
  })

  it('—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ tester2', async () => {
    const data: CapitalContract.Actions.CalculateVotes.IFinalVoting = {
      coopname: 'voskhod',
      username: tester2,
      project_hash: project1.project_hash,
    }

    const result = await processCalculateVotes(blockchain, data)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.equal_voting_amount), 2)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.total_voting_pool) / 3, 2)

    expect(result.txId).toBeDefined()
  })

  it('—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ tester3', async () => {
    const data: CapitalContract.Actions.CalculateVotes.IFinalVoting = {
      coopname: 'voskhod',
      username: tester3,
      project_hash: project1.project_hash,
    }

    const result = await processCalculateVotes(blockchain, data)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.equal_voting_amount), 2)
    expect(parseFloat(result.segmentAfter.voting_bonus)).toBeCloseTo(parseFloat(result.projectAfter.voting.amounts.total_voting_pool) / 3, 2)

    expect(result.txId).toBeDefined()
  })

  // it('—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 20000 RUB', async () => {
  //   await allocateFundsToResult(blockchain, 'voskhod', project1.project_hash, result1.result_hash, '20000.0000 RUB')
  // })

  // it('–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è tester1 –Ω–∞ 10 —á–∞—Å–æ–≤ –ø–æ 1000 RUB', async () => {
  //   const { finalResult, commitHash } = await commitToResult(blockchain, 'voskhod', result1.result_hash, result1.project_hash, tester1, tester1CommitHours)
  //   commits.push(commitHash)

  //   expect(finalResult.creators_base).toBe('10000.0000 RUB')
  //   expect(finalResult.creators_bonus).toBe('3820.0000 RUB')
  //   expect(finalResult.authors_bonus).toBe('16180.0000 RUB')
  //   expect(finalResult.generated).toBe('30000.0000 RUB')
  //   expect(finalResult.capitalists_bonus).toBe('48540.0000 RUB')
  //   expect(finalResult.total).toBe('78540.0000 RUB')
  // })

  // it('–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è tester2 –Ω–∞ 10 —á–∞—Å–æ–≤ –ø–æ 1000 RUB', async () => {
  //   const { finalResult, commitHash } = await commitToResult(blockchain, 'voskhod', result1.result_hash, result1.project_hash, tester2, tester2CommitHours)
  //   commits.push(commitHash)

  //   expect(finalResult.creators_base).toBe('20000.0000 RUB')
  //   expect(finalResult.creators_bonus).toBe('7640.0000 RUB')
  //   expect(finalResult.authors_bonus).toBe('32360.0000 RUB')
  //   expect(finalResult.generated).toBe('60000.0000 RUB')
  //   expect(finalResult.capitalists_bonus).toBe('97080.0000 RUB')
  //   expect(finalResult.total).toBe('157080.0000 RUB')
  // })

  // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—É–¥—ã, –∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∏–∂–µ
  // it('–ø–∏—à–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—à–µ–ª—ë–∫ –æ—Ç tester1 –Ω–∞ 10000 RUB', async () => {
  //   const withdrawAmount = `${(tester1CommitHours * parseFloat(ratePerHour)).toFixed(4)} RUB`
  //   console.log('commits: ', commits)
  //   const { withdrawHash, transactionId } = await withdrawContribution(
  //     blockchain,
  //     'voskhod',
  //     tester1,
  //     result1.result_hash,
  //     result1.project_hash,
  //     [commits[0]],
  //     withdrawAmount,
  //     fakeDocument,
  //   )
  // })

  // it('–ø–∏—à–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—à–µ–ª—ë–∫ –æ—Ç tester2 –Ω–∞ 10000 RUB', async () => {
  //   const withdrawAmount = `${(tester2CommitHours * parseFloat(ratePerHour)).toFixed(4)} RUB`

  //   const { withdrawHash, transactionId } = await withdrawContribution(
  //     blockchain,
  //     'voskhod',
  //     tester2,
  //     result1.result_hash,
  //     result1.project_hash,
  //     [commits[1]],
  //     withdrawAmount,
  //     fakeDocument,
  //   )
  // })

  // it('—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥ –Ω–∞ 1000 RUB', async () => {
  //   const expenseAmount = '1000.0000 RUB'

  //   const { expenseHash } = await registerExpense(
  //     blockchain,
  //     'voskhod', // coopname
  //     result1.result_hash, // resultHash
  //     project1.project_hash, // projectHash
  //     tester1, // creator
  //     4, // fund_id (—Ñ–æ–Ω–¥ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)
  //     expenseAmount,
  //     fakeDocument, // fakeDocument
  //   )
  // })

  // it('—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥ –Ω–∞ 5000 RUB', async () => {
  //   const expenseAmount = '5000.0000 RUB'

  //   const { expenseHash } = await registerExpense(
  //     blockchain,
  //     'voskhod', // coopname
  //     result1.result_hash, // resultHash
  //     project1.project_hash, // projectHash
  //     tester1, // creator
  //     4, // fund_id (—Ñ–æ–Ω–¥ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)
  //     expenseAmount,
  //     fakeDocument, // fakeDocument
  //   )
  // })

  // /// ____________
  // it('–∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª –∏ —Å—Ç–∞—Ä—Ç—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', async () => {
  //   const data: CapitalContract.Actions.StartDistribution.IStart = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //   }

  //   const result = await blockchain.api.transact(
  //     {
  //       actions: [
  //         {
  //           account: CapitalContract.contractName.production,
  //           name: CapitalContract.Actions.StartDistribution.actionName,
  //           authorization: [
  //             {
  //               actor: 'voskhod',
  //               permission: 'active',
  //             },
  //           ],
  //           data,
  //         },
  //       ],
  //     },
  //     {
  //       blocksBehind: 3,
  //       expireSeconds: 30,
  //     },
  //   )

  //   getTotalRamUsage(result)
  //   expect(result.transaction_id).toBeDefined()

  //   const blockchainResult = (await blockchain.getTableRows(
  //     CapitalContract.contractName.production,
  //     'voskhod',
  //     'results',
  //     1,
  //     result1.result_hash,
  //     result1.result_hash,
  //     2,
  //     'sha256',
  //   ))[0]

  //   expect(blockchainResult).toBeDefined()
  //   expect(blockchainResult.result_hash).toBe(result1.result_hash)
  //   expect(blockchainResult.project_hash).toBe(project1.project_hash)
  //   expect(blockchainResult.coopname).toBe('voskhod')
  //   expect(blockchainResult.status).toBe('closed')

  //   expect(blockchainResult.creators_amount_remain).toBe(blockchainResult.creators_amount)
  //   expect(blockchainResult.creators_bonus_remain).toBe(blockchainResult.creators_bonus)
  //   expect(blockchainResult.authors_bonus_remain).toBe(blockchainResult.authors_bonus)
  //   expect(blockchainResult.capitalists_bonus_remain).toBe(blockchainResult.capitalists_bonus)
  //   console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏—ë–º–∞: ', blockchainResult)
  // })

  // it('–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ', async () => {
  //   const claim_hash = generateRandomSHA256()

  //   const data: CapitalContract.Actions.CreateClaim.ICreateClaim = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //     username: tester1,
  //     claim_hash,
  //   }

  //   const result = await blockchain.api.transact(
  //     {
  //       actions: [
  //         {
  //           account: CapitalContract.contractName.production,
  //           name: CapitalContract.Actions.CreateClaim.actionName,
  //           authorization: [
  //             {
  //               actor: 'voskhod',
  //               permission: 'active',
  //             },
  //           ],
  //           data,
  //         },
  //       ],
  //     },
  //     {
  //       blocksBehind: 3,
  //       expireSeconds: 30,
  //     },
  //   )
  //   getTotalRamUsage(result)
  //   expect(result.transaction_id).toBeDefined()

  //   const blockchainResult = (await blockchain.getTableRows(
  //     CapitalContract.contractName.production,
  //     'voskhod',
  //     'results',
  //     1,
  //     result1.result_hash,
  //     result1.result_hash,
  //     2,
  //     'sha256',
  //   ))[0]

  //   expect(blockchainResult).toBeDefined()
  //   console.log('blockchainResult: ', blockchainResult)
  // })

  // it('–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ', async () => {
  //   const claim_hash = generateRandomSHA256()

  //   const data: CapitalContract.Actions.CreateClaim.ICreateClaim = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //     username: tester2,
  //     claim_hash,
  //   }

  //   const result = await blockchain.api.transact(
  //     {
  //       actions: [
  //         {
  //           account: CapitalContract.contractName.production,
  //           name: CapitalContract.Actions.CreateClaim.actionName,
  //           authorization: [
  //             {
  //               actor: 'voskhod',
  //               permission: 'active',
  //             },
  //           ],
  //           data,
  //         },
  //       ],
  //     },
  //     {
  //       blocksBehind: 3,
  //       expireSeconds: 30,
  //     },
  //   )
  //   getTotalRamUsage(result)
  //   expect(result.transaction_id).toBeDefined()

  //   const blockchainResult = (await blockchain.getTableRows(
  //     CapitalContract.contractName.production,
  //     'voskhod',
  //     'results',
  //     1,
  //     result1.result_hash,
  //     result1.result_hash,
  //     2,
  //     'sha256',
  //   ))[0]

  //   expect(blockchainResult).toBeDefined()
  //   console.log('blockchainResult: ', blockchainResult)
  // })

  // it('–ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É', async () => {
  //   const claim_hash = generateRandomSHA256()

  //   const data: CapitalContract.Actions.CreateClaim.ICreateClaim = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //     username: tester2,
  //     claim_hash,
  //   }

  //   try {
  //     await sleep(1000)
  //     await blockchain.api.transact(
  //       {
  //         actions: [
  //           {
  //             account: CapitalContract.contractName.production,
  //             name: CapitalContract.Actions.CreateClaim.actionName,
  //             authorization: [
  //               {
  //                 actor: 'voskhod',
  //                 permission: 'active',
  //               },
  //             ],
  //             data,
  //           },
  //         ],
  //       },
  //       {
  //         blocksBehind: 3,
  //         expireSeconds: 30,
  //       },
  //     )
  //     throw new Error('–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
  //   }
  //   catch (error: any) {
  //     const message = error.json?.error?.details?.[0]?.message
  //     expect(message).toMatch(/–ö–ª–∞–π–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç/i)
  //   }
  // })

  // it('–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ', async () => {
  //   const claim_hash = generateRandomSHA256()

  //   const data: CapitalContract.Actions.CreateClaim.ICreateClaim = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //     username: investor1,
  //     claim_hash,
  //   }

  //   const result = await blockchain.api.transact(
  //     {
  //       actions: [
  //         {
  //           account: CapitalContract.contractName.production,
  //           name: CapitalContract.Actions.CreateClaim.actionName,
  //           authorization: [
  //             {
  //               actor: 'voskhod',
  //               permission: 'active',
  //             },
  //           ],
  //           data,
  //         },
  //       ],
  //     },
  //     {
  //       blocksBehind: 3,
  //       expireSeconds: 30,
  //     },
  //   )
  //   getTotalRamUsage(result)
  //   expect(result.transaction_id).toBeDefined()

  //   const blockchainResult = (await blockchain.getTableRows(
  //     CapitalContract.contractName.production,
  //     'voskhod',
  //     'results',
  //     1,
  //     result1.result_hash,
  //     result1.result_hash,
  //     2,
  //     'sha256',
  //   ))[0]

  //   expect(blockchainResult).toBeDefined()
  //   console.log('investorResult: ', blockchainResult)
  // })

  // it('–ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É', async () => {
  //   const claim_hash = generateRandomSHA256()

  //   const data: CapitalContract.Actions.CreateClaim.ICreateClaim = {
  //     coopname: 'voskhod',
  //     application: 'voskhod',
  //     result_hash: result1.result_hash,
  //     username: investor1,
  //     claim_hash,
  //   }

  //   try {
  //     await sleep(1000)
  //     await blockchain.api.transact(
  //       {
  //         actions: [
  //           {
  //             account: CapitalContract.contractName.production,
  //             name: CapitalContract.Actions.CreateClaim.actionName,
  //             authorization: [
  //               {
  //                 actor: 'voskhod',
  //                 permission: 'active',
  //               },
  //             ],
  //             data,
  //           },
  //         ],
  //       },
  //       {
  //         blocksBehind: 3,
  //         expireSeconds: 30,
  //       },
  //     )
  //     throw new Error('–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
  //   }
  //   catch (error: any) {
  //     const message = error.json?.error?.details?.[0]?.message
  //     expect(message).toMatch(/–ö–ª–∞–π–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç/i)
  //   }
  // })
})
