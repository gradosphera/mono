import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { getCapitalWallet } from './getCapitalWallet'

export async function processRefreshProg(
  blockchain: any,
  coopname: string,
  username: string,
) {
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${username}`)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const programWalletBefore = await getCapitalWallet(blockchain, coopname, username)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–π—â–∏–∫–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–∞–π—â–∏–∫–∞:', programWalletBefore)

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  const refreshData: CapitalContract.Actions.RefreshProgram.IRefreshProgram = {
    coopname,
    username,
  }

  const refreshResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.RefreshProgram.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: refreshData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(refreshResult)
  expect(refreshResult.transaction_id).toBeDefined()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const programWalletAfter = await getCapitalWallet(blockchain, coopname, username)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–π—â–∏–∫–∞ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–∞–π—â–∏–∫–∞:', programWalletAfter)

  console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`)

  return {
    transactionId: refreshResult.transaction_id,
    transaction: refreshResult,
    programWalletBefore,
    programWalletAfter,
  }
}
