import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { fakeDocument } from '../shared/fakeDocument'
import type Blockchain from '../../blockchain'
import { getCoopProgramWallet, getUserProgramWallet } from '../wallet/walletUtils'
import { getSegment } from './getSegment'
import { getProjectWallet } from './getProjectWallet'
import { capitalProgramId, walletProgramId } from './consts'
import { getProject } from './getProject'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param blockchain —ç–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param coopname –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞
 * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param projectHash —Ö–µ—à –ø—Ä–æ–µ–∫—Ç–∞
 * @param walletAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
 * @param capitalAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
 * @param projectAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function processConvertSegment(
  blockchain: Blockchain,
  coopname: string,
  username: string,
  projectHash: string,
  walletAmount: string,
  capitalAmount: string,
  projectAmount: string,
) {
  const convertHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: ${convertHash}`)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const segmentBefore = await getSegment(blockchain, coopname, projectHash, username)
  console.log('üìä –°–µ–≥–º–µ–Ω—Ç –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', segmentBefore)

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const mainWalletBefore = await getCoopProgramWallet(blockchain, coopname, walletProgramId)
  const capitalWalletBefore = await getCoopProgramWallet(blockchain, coopname, capitalProgramId)
  const userCapitalWalletBefore = await getUserProgramWallet(blockchain, coopname, username, capitalProgramId)
  const projectWalletBefore = await getProjectWallet(blockchain, coopname, projectHash, username)
  const projectBefore = await getProject(blockchain, coopname, projectHash)

  console.log('üí∞ –ö–æ—à–µ–ª—å–∫–∏ –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')
  console.log('  ‚ñ∂ –ì–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', mainWalletBefore)
  console.log('  ‚ñ∂ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:', capitalWalletBefore)
  console.log('  ‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:', userCapitalWalletBefore)
  console.log('  ‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletBefore)
  console.log('  ‚ñ∂ –ü—Ä–æ–µ–∫—Ç –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ', projectBefore)

  // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
  const convertSegmentData: CapitalContract.Actions.ConvertSegment.IConvertSegment = {
    coopname,
    username,
    project_hash: projectHash,
    convert_hash: convertHash,
    wallet_amount: walletAmount,
    capital_amount: capitalAmount,
    project_amount: projectAmount,
    convert_statement: fakeDocument,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ConvertSegment –¥–ª—è ${username}`)
  console.log(`   –í –≥–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${walletAmount}`)
  console.log(`   –í –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é: ${capitalAmount}`)
  console.log(`   –í –ø—Ä–æ–µ–∫—Ç: ${projectAmount}`)

  const convertResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.ConvertSegment.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: convertSegmentData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(convertResult)
  expect(convertResult.transaction_id).toBeDefined()
  console.log('‚úÖ –°–µ–≥–º–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', convertHash)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω)
  const segmentAfter = await getSegment(blockchain, coopname, projectHash, username)

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const mainWalletAfter = await getCoopProgramWallet(blockchain, coopname, walletProgramId)
  const capitalWalletAfter = await getCoopProgramWallet(blockchain, coopname, capitalProgramId)
  const userCapitalWalletAfter = await getUserProgramWallet(blockchain, coopname, username, capitalProgramId)
  const projectWalletAfter = await getProjectWallet(blockchain, coopname, projectHash, username)

  console.log('üí∞ –ö–æ—à–µ–ª—å–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:')
  console.log('  ‚ñ∂ –ì–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', mainWalletAfter)
  console.log('  ‚ñ∂ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:', capitalWalletAfter)
  console.log('  ‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:', userCapitalWalletAfter)
  console.log('  ‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletAfter)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  expect(segmentAfter).toBeUndefined()
  console.log('üîç –°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ', segmentAfter)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ—à–µ–ª—å–∫–∞—Ö
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ—à–µ–ª—å–∫–∞—Ö:')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã (wallet_amount)
  if (walletAmount !== '0.0000 RUB') {
    const walletAmountValue = parseFloat(walletAmount.split(' ')[0])
    const beforeAvailable = mainWalletBefore ? parseFloat(mainWalletBefore.available.split(' ')[0]) : 0
    const afterAvailable = mainWalletAfter ? parseFloat(mainWalletAfter.available.split(' ')[0]) : 0
    const expectedIncrease = beforeAvailable + walletAmountValue
    console.log(`‚úÖ –ì–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${beforeAvailable} ‚Üí ${afterAvailable} (+${walletAmountValue})`)
    expect(afterAvailable).toBeCloseTo(expectedIncrease, 1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (capital_amount)
  if (capitalAmount !== '0.0000 RUB') {
    const capitalAmountValue = parseFloat(capitalAmount.split(' ')[0])
    const beforeBlocked = capitalWalletBefore ? parseFloat(capitalWalletBefore.blocked.split(' ')[0]) : 0
    const afterBlocked = capitalWalletAfter ? parseFloat(capitalWalletAfter.blocked.split(' ')[0]) : 0
    const expectedIncrease = beforeBlocked + capitalAmountValue
    console.log(`‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: ${beforeBlocked} ‚Üí ${afterBlocked} (+${capitalAmountValue})`)
    expect(afterBlocked).toBeCloseTo(expectedIncrease, 1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (capital_amount)
  if (capitalAmount !== '0.0000 RUB') {
    const capitalAmountValue = parseFloat(capitalAmount.split(' ')[0])
    const beforeBlocked = userCapitalWalletBefore ? parseFloat(userCapitalWalletBefore.blocked.split(' ')[0]) : 0
    const afterBlocked = userCapitalWalletAfter ? parseFloat(userCapitalWalletAfter.blocked.split(' ')[0]) : 0
    const expectedIncrease = beforeBlocked + capitalAmountValue
    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: ${beforeBlocked} ‚Üí ${afterBlocked} (+${capitalAmountValue})`)
    expect(afterBlocked).toBeCloseTo(expectedIncrease, 1)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (project_amount)
  if (projectAmount !== '0.0000 RUB' && projectBefore.parent_hash.includes('0000000000')) {
    const projectAmountValue = parseFloat(projectAmount.split(' ')[0])
    const beforeShares = projectWalletBefore ? parseFloat(projectWalletBefore.shares.split(' ')[0]) : 0
    const afterShares = projectWalletAfter ? parseFloat(projectWalletAfter.shares.split(' ')[0]) : 0
    const expectedIncrease = beforeShares + projectAmountValue
    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞: ${beforeShares} ‚Üí ${afterShares} (+${projectAmountValue})`)
    expect(afterShares).toBeCloseTo(expectedIncrease, 1)
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:')
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –¥–æ:', segmentBefore)
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª—ë–Ω: ', segmentAfter)

  console.log(`\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)

  return {
    convertHash,
    segmentBefore,
    segmentAfter,
    mainWalletBefore,
    mainWalletAfter,
    capitalWalletBefore,
    capitalWalletAfter,
    userCapitalWalletBefore,
    userCapitalWalletAfter,
    projectWalletBefore,
    projectWalletAfter,
    transactionId: convertResult.transaction_id,
  }
}
