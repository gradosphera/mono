import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { fakeDocument } from '../shared/fakeDocument'
import type Blockchain from '../../blockchain'
import { getSegment } from './getSegment'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param blockchain —ç–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param coopname –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞
 * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param projectHash —Ö–µ—à –ø—Ä–æ–µ–∫—Ç–∞
 * @param walletAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
 * @param capitalAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
 * @param projectAmount —Å—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
 */
export async function processConvertSegment(
  blockchain: Blockchain,
  coopname: string,
  username: string,
  projectHash: string,
  walletAmount: string,
  capitalAmount: string,
  projectAmount: string,
) {
  const convertHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: ${convertHash}`)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const segmentBefore = await getSegment(blockchain, coopname, projectHash, username)
  console.log('üìä –°–µ–≥–º–µ–Ω—Ç –¥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', segmentBefore)

  // 1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
  const convertSegmentData: CapitalContract.Actions.ConvertSegment.IConvertSegment = {
    coopname,
    username,
    project_hash: projectHash,
    convert_hash: convertHash,
    wallet_amount: walletAmount,
    capital_amount: capitalAmount,
    project_amount: projectAmount,
    convert_statement: fakeDocument,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ConvertSegment –¥–ª—è ${username}`)
  console.log(`   –í –≥–ª–∞–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${walletAmount}`)
  console.log(`   –í –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é: ${capitalAmount}`)
  console.log(`   –í –ø—Ä–æ–µ–∫—Ç: ${projectAmount}`)

  const convertResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.ConvertSegment.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: convertSegmentData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(convertResult)
  expect(convertResult.transaction_id).toBeDefined()
  console.log('‚úÖ –°–µ–≥–º–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', convertHash)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  const segmentAfter = await getSegment(blockchain, coopname, projectHash, username)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ COMPLETED
  expect(segmentAfter.status).toBe('completed')
  console.log('üîç –°—Ç–∞—Ç—É—Å —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', segmentAfter.status)

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:')
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –¥–æ:', segmentBefore)
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ:', segmentAfter)

  console.log(`\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)

  return {
    convertHash,
    segmentBefore,
    segmentAfter,
    transactionId: convertResult.transaction_id,
  }
}
