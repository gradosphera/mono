import { expect } from 'vitest'
import { CapitalContract, SovietContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { getCoopProgramWallet, getUserProgramWallet } from '../wallet/walletUtils'
import { processDecision } from '../soviet/processDecision'
import { processApprove } from './processApprove'
import { getSegment } from './getSegment'
import { sourceProgramId } from './consts'

export async function investInProject(
  blockchain: any,
  coopname: string,
  investor: string,
  projectHash: string,
  investAmount: string,
  fakeDocument: any,
) {
  const investHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${investHash}`)

  const prevProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0] || { invested: '0.0000 RUB', available: '0.0000 RUB' }

  const prevUserWallet = await getUserProgramWallet(blockchain, coopname, investor, sourceProgramId) || { blocked: '0.0000 RUB' }
  const prevProgramWallet = await getCoopProgramWallet(blockchain, coopname, sourceProgramId) || { blocked: '0.0000 RUB', share_contributions: '0.0000 RUB' }

  console.log('üìä –ë–∞–ª–∞–Ω—Å—ã –¥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:')
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', prevProject)
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', prevUserWallet)
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', prevProgramWallet)

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
  const createInvestData: CapitalContract.Actions.CreateInvest.ICreateInvest = {
    coopname,
    application: coopname,
    project_hash: projectHash,
    username: investor,
    invest_hash: investHash,
    amount: investAmount,
    statement: fakeDocument,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ CreateInvest –¥–ª—è ${investor} –Ω–∞ —Å—É–º–º—É ${investAmount}`)
  const createInvestResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.CreateInvest.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: createInvestData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(createInvestResult)
  expect(createInvestResult.transaction_id).toBeDefined()

  const blockchainInvest = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'invests',
    1,
    investHash,
    investHash,
    2,
    'sha256',
  ))[0]

  console.log('üîç –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', blockchainInvest)
  expect(blockchainInvest).toBeDefined()
  expect(blockchainInvest.status).toBe('created')

  // –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
  console.log(`\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ${investHash}`)
  const approveInvestResult = await processApprove(blockchain, coopname, investHash)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
  const blockchainEmptyInvest = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'invests',
    1,
    investHash,
    investHash,
    2,
    'sha256',
  ))[0]

  // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  expect(blockchainEmptyInvest).toBeUndefined()

  const finalProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0]

  const finalUserWallet = await getUserProgramWallet(blockchain, coopname, investor, sourceProgramId)
  const finalProgramWallet = await getCoopProgramWallet(blockchain, coopname, sourceProgramId)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const segment = await getSegment(blockchain, coopname, projectHash, investor)

  console.log('\nüìä –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:')
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', finalProject)
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç:', segment)
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', finalUserWallet)
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', finalProgramWallet)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
  expect(parseFloat(finalUserWallet.blocked)).toBe(parseFloat(prevUserWallet.blocked) + parseFloat(investAmount))
  expect(parseFloat(finalProgramWallet.blocked)).toBe(parseFloat(prevProgramWallet.blocked) + parseFloat(investAmount))

  console.log(`\n‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${investAmount} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`)

  return {
    investHash,
    invest: blockchainInvest,
    transactionId: approveInvestResult.transaction_id,
    prevProject,
    project: finalProject,
    segment,
  }
}
