import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import type Blockchain from '../../blockchain'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É
 * @param blockchain —ç–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param data –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 */
export async function processCompleteVoting(
  blockchain: Blockchain,
  data: CapitalContract.Actions.CompleteVoting.ICompleteVoting,
) {
  const { coopname, project_hash } = data

  console.log(`\n‚úÖ –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${project_hash}`)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const projectBefore = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    project_hash,
    project_hash,
    3,
    'sha256',
  ))[0]

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:', projectBefore.status)
  console.log('‚ñ∂ –ì–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:', projectBefore.voting.votes_received)
  console.log('‚ñ∂ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', projectBefore.voting.total_voters)
  console.log('‚ñ∂ –î–µ–¥–ª–∞–π–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', projectBefore.voting.voting_deadline)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  const txResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.CompleteVoting.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data,
        },
      ],
    },
    { blocksBehind: 3, expireSeconds: 30 },
  )
  getTotalRamUsage(txResult)
  expect(txResult.transaction_id).toBeDefined()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const projectAfter = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    project_hash,
    project_hash,
    3,
    'sha256',
  ))[0]

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:', projectAfter.status)
  console.log('‚ñ∂ –ì–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:', projectAfter.voting.votes_received)
  console.log('‚ñ∂ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', projectAfter.voting.total_voters)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ completed
  expect(projectAfter.status).toBe('completed')

  console.log(`\n‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${project_hash} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)

  return {
    projectHash: project_hash,
    txId: txResult.transaction_id,
    projectBefore,
    projectAfter,
  }
}
