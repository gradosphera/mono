import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'

export async function allocateFundsToResult(
  blockchain: any,
  coopname: string,
  projectHash: string,
  resultHash: string,
  amount: string,
) {
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${resultHash}, —Å—É–º–º–∞: ${amount}`)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const prevResult = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'results',
    1,
    resultHash,
    resultHash,
    2,
    'sha256',
  ))[0] || { available: '0.0000 RUB' }

  const prevProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0] || { available: '0.0000 RUB' }

  console.log('üìä –ë–∞–ª–∞–Ω—Å—ã –¥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –†–µ–∑—É–ª—å—Ç–∞—Ç:', prevResult)
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', prevProject)

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
  const allocateData: CapitalContract.Actions.Allocate.IAllocate = {
    coopname,
    application: coopname,
    project_hash: projectHash,
    result_hash: resultHash,
    amount,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Allocate –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultHash}`)
  const allocateResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.Allocate.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: allocateData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(allocateResult)
  expect(allocateResult.transaction_id).toBeDefined()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const updatedResult = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'results',
    1,
    resultHash,
    resultHash,
    2,
    'sha256',
  ))[0]

  const updatedProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0]

  console.log('\nüìä –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –†–µ–∑—É–ª—å—Ç–∞—Ç:', updatedResult)
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', updatedProject)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è available
  expect(parseFloat(updatedResult.available)).toBe(parseFloat(prevResult.available) + parseFloat(amount))
  expect(parseFloat(updatedProject.available)).toBe(parseFloat(prevProject.available) - parseFloat(amount))
  expect(parseFloat(updatedProject.allocated)).toBe(parseFloat(prevProject.allocated) + parseFloat(amount))

  console.log(`\n‚úÖ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ ${amount} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`)

  return { transactionId: allocateResult.transaction_id }
}
