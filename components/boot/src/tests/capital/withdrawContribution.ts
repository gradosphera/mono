import { expect } from 'vitest'
import { CapitalContract, SovietContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { getCoopProgramWallet, getUserProgramWallet } from '../wallet/walletUtils'
import { processDecision } from '../soviet/processDecision'
import { capitalProgramId, walletProgramId } from './consts'

export async function withdrawContribution(
  blockchain: any,
  coopname: string,
  username: string,
  resultHash: string,
  projectHash: string, // –î–æ–±–∞–≤–ª–µ–Ω projectHash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ spend
  commitHashes: string[],
  withdrawAmount: string,
  fakeDocument: any,
) {
  const withdrawHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${withdrawHash}, —Å—É–º–º–∞: ${withdrawAmount}`)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
  const prevCooFundUserWallet = await getUserProgramWallet(blockchain, coopname, username, capitalProgramId)
  const prevCooFundProgramWallet = await getCoopProgramWallet(blockchain, coopname, capitalProgramId)
  const prevUserWallet = await getUserProgramWallet(blockchain, coopname, username, walletProgramId)
  const prevProgramWallet = await getCoopProgramWallet(blockchain, coopname, walletProgramId)

  const prevProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0] || { spend: '0.0000 RUB' }

  console.log('üìä –ë–∞–ª–∞–Ω—Å—ã –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞:')
  console.log('‚ñ∂ cooFundUserWallet:', prevCooFundUserWallet)
  console.log('‚ñ∂ cooFundProgramWallet:', prevCooFundProgramWallet)
  console.log('‚ñ∂ userWallet:', prevUserWallet)
  console.log('‚ñ∂ programWallet:', prevProgramWallet)
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', prevProject)

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
  const createWithdrawData: CapitalContract.Actions.WithdrawResult.IWithdrawFromResult = {
    coopname,
    application: coopname,
    username,
    result_hash: resultHash,
    withdraw_hash: withdrawHash,
    return_statement: fakeDocument,
    amount: withdrawAmount,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ CreateWithdraw –¥–ª—è ${username} –Ω–∞ —Å—É–º–º—É ${withdrawAmount}`)
  const createWithdrawResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.WithdrawResult.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: createWithdrawData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(createWithdrawResult)
  expect(createWithdrawResult.transaction_id).toBeDefined()

  let blockchainWithdraw = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    CapitalContract.Tables.ResultWithdraws.tableName,
    1,
    withdrawHash,
    withdrawHash,
    2,
    'sha256',
  ))[0]

  console.log('üîç –í–æ–∑–≤—Ä–∞—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', blockchainWithdraw)
  expect(blockchainWithdraw).toBeDefined()
  expect(blockchainWithdraw.status).toBe('created')
  expect(blockchainWithdraw.amount).toBe(withdrawAmount)

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
  const approveWithdrawData: CapitalContract.Actions.ApproveWithdrawResult.IApproveWithdrawResult = {
    coopname,
    application: coopname,
    approver: 'ant',
    withdraw_hash: withdrawHash,
    approved_return_statement: fakeDocument,
  }

  console.log(`\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ ${withdrawHash}`)
  const approveWithdrawResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.ApproveWithdrawResult.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: approveWithdrawData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(approveWithdrawResult)
  expect(approveWithdrawResult.transaction_id).toBeDefined()

  blockchainWithdraw = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    CapitalContract.Tables.ResultWithdraws.tableName,
    1,
    withdrawHash,
    withdrawHash,
    2,
    'sha256',
  ))[0]

  console.log('üîç –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', blockchainWithdraw)
  expect(blockchainWithdraw).toBeDefined()
  expect(blockchainWithdraw.status).toBe('approved')

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
  const decisions = await blockchain.getTableRows(
    SovietContract.contractName.production,
    coopname,
    'decisions',
    1000,
  )
  const lastDecision = decisions[decisions.length - 1]

  console.log(`\nüìú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è: ${lastDecision.id}`)

  await processDecision(blockchain, lastDecision.id)

  blockchainWithdraw = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    CapitalContract.Tables.ResultWithdraws.tableName,
    1,
    withdrawHash,
    withdrawHash,
    2,
    'sha256',
  ))[0]

  console.log('üìå –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', blockchainWithdraw)
  expect(blockchainWithdraw).toBeUndefined()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
  const cooFundUserWallet = await getUserProgramWallet(blockchain, coopname, username, capitalProgramId)
  const cooFundProgramWallet = await getCoopProgramWallet(blockchain, coopname, capitalProgramId)
  const userWallet = await getUserProgramWallet(blockchain, coopname, username, walletProgramId)
  const programWallet = await getCoopProgramWallet(blockchain, coopname, walletProgramId)

  const finalProject = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    projectHash,
    projectHash,
    3,
    'sha256',
  ))[0]

  console.log('\nüìä –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:')
  console.log('‚ñ∂ cooFundUserWallet:', cooFundUserWallet)
  console.log('‚ñ∂ cooFundProgramWallet:', cooFundProgramWallet)
  console.log('‚ñ∂ userWallet:', userWallet)
  console.log('‚ñ∂ programWallet:', programWallet)
  console.log('‚ñ∂ –ü—Ä–æ–µ–∫—Ç:', finalProject)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤
  expect(parseFloat(cooFundUserWallet.available)).toBe(parseFloat(prevCooFundUserWallet.available))
  expect(parseFloat(cooFundUserWallet.blocked)).toBe(parseFloat(prevCooFundUserWallet.blocked))
  expect(parseFloat(cooFundProgramWallet.available)).toBe(parseFloat(prevCooFundProgramWallet.available))
  expect(parseFloat(cooFundProgramWallet.blocked)).toBe(parseFloat(prevCooFundProgramWallet.blocked))

  expect(parseFloat(userWallet.available)).toBe(parseFloat(prevUserWallet.available) + parseFloat(withdrawAmount))
  expect(parseFloat(programWallet.available)).toBe(parseFloat(prevProgramWallet.available) + parseFloat(withdrawAmount))
  expect(parseFloat(userWallet.blocked)).toBe(parseFloat(prevUserWallet.blocked))
  expect(parseFloat(programWallet.blocked)).toBe(parseFloat(prevProgramWallet.blocked))

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è spend –≤ –ø—Ä–æ–µ–∫—Ç–µ
  expect(parseFloat(finalProject.withdrawed)).toBe(parseFloat(prevProject.withdrawed) + parseFloat(withdrawAmount))

  expect(parseFloat(finalProject.spend)).toBe(parseFloat(prevProject.spend))

  console.log(`\n‚úÖ –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ ${withdrawAmount} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)

  return { withdrawHash, transactionId: approveWithdrawResult.transaction_id, finalProject }
}
