import { expect } from 'vitest'
import { CapitalContract, SovietContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { processLastDecision } from '../soviet/processLastDecision'
import { fakeDocument } from '../shared/fakeDocument'
import type Blockchain from '../../blockchain'
import { getSegment } from './getSegment'
import { processApprove } from './processApprove'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤
 * @param blockchain —ç–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param coopname –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞
 * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param projectHash —Ö–µ—à –ø—Ä–æ–µ–∫—Ç–∞
 * @param contributionAmount —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–∞
 * @param debtAmount —Å—É–º–º–∞ –¥–æ–ª–≥–∞ –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é
 * @param debtHashes –≤–µ–∫—Ç–æ—Ä —Ö—ç—à–µ–π –¥–æ–ª–≥–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
 */
export async function processPushResult(
  blockchain: Blockchain,
  coopname: string,
  username: string,
  projectHash: string,
  contributionAmount: string,
  debtAmount: string,
  debtHashes: string[] = [],
) {
  const resultHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${resultHash}`)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const segmentBefore = await getSegment(blockchain, coopname, projectHash, username)
  console.log('üìä –°–µ–≥–º–µ–Ω—Ç –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', segmentBefore)

  fakeDocument.signatures[0].signer = username

  // 1. –í–Ω–æ—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const pushResultData: CapitalContract.Actions.PushResult.IPushResult = {
    coopname,
    username,
    project_hash: projectHash,
    result_hash: resultHash,
    contribution_amount: contributionAmount,
    debt_amount: debtAmount,
    statement: fakeDocument,
    debt_hashes: debtHashes,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ PushResult –¥–ª—è ${username} –Ω–∞ —Å—É–º–º—É ${contributionAmount}`)
  const pushResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.PushResult.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: pushResultData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(pushResult)
  expect(pushResult.transaction_id).toBeDefined()
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ—Å–µ–Ω:', resultHash)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–ª—Å—è
  const results = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'results',
    1,
    resultHash,
    resultHash,
    3,
    'sha256',
  ))
  const createdResult = results[0]
  console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', createdResult)
  expect(createdResult).toBeDefined()
  expect(createdResult.status).toBe('created')

  // 2. –û–¥–æ–±—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ processApprove (soviet –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
  console.log(`\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultHash} —á–µ—Ä–µ–∑ soviet`)
  await processApprove(blockchain, coopname, resultHash)
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–æ–±—Ä–µ–Ω —Å–æ–≤–µ—Ç–æ–º')

  // 3. –ü—Ä–æ—Ü–µ—Å—Å–∏–º —Ä–µ—à–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
  await processLastDecision(blockchain, coopname)
  console.log('‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–æ')

  // 4. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç ‚Ññ1 –≤–∫–ª–∞–¥—á–∏–∫–æ–º
  const signAct1Data: CapitalContract.Actions.SignAct1.ISignAct1 = {
    coopname,
    username,
    result_hash: resultHash,
    act: fakeDocument,
  }

  console.log(`\n‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞ ‚Ññ1 –≤–∫–ª–∞–¥—á–∏–∫–æ–º ${username}`)
  const signAct1Result = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.SignAct1.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: signAct1Data,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(signAct1Result)
  expect(signAct1Result.transaction_id).toBeDefined()
  console.log('‚úÖ –ê–∫—Ç ‚Ññ1 –ø–æ–¥–ø–∏—Å–∞–Ω –≤–∫–ª–∞–¥—á–∏–∫–æ–º')

  fakeDocument.signatures[1] = fakeDocument.signatures[0]
  fakeDocument.signatures[1].signer = 'ant'

  // 5. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç ‚Ññ2 –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º
  const signAct2Data: CapitalContract.Actions.SignAct2.ISignAct2 = {
    coopname,
    result_hash: resultHash,
    act: fakeDocument,
    username: 'ant',
  }

  console.log(`\n‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞ ‚Ññ2 –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º`)
  const signAct2Result = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.SignAct2.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: signAct2Data,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(signAct2Result)
  expect(signAct2Result.transaction_id).toBeDefined()
  console.log('‚úÖ –ê–∫—Ç ‚Ññ2 –ø–æ–¥–ø–∏—Å–∞–Ω –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º')

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const segmentAfter = await getSegment(blockchain, coopname, projectHash, username)

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:')
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –¥–æ:', segmentBefore)
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ:', segmentAfter)

  console.log(`\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ ${contributionAmount} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)

  return {
    resultHash,
    result: createdResult,
    segmentBefore,
    segmentAfter,
    transactionId: signAct2Result.transaction_id,
  }
}
