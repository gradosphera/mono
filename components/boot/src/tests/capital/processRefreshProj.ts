import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { getProjectWallet } from './getProjectWallet'

export async function processRefreshProj(
  blockchain: any,
  coopname: string,
  projectHash: string,
  username: string,
) {
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ: –ø—Ä–æ–µ–∫—Ç=${projectHash}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${username}`)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const projectWalletBefore = await getProjectWallet(blockchain, coopname, projectHash, username)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletBefore)

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
  const refreshData: CapitalContract.Actions.RefreshProject.IRefreshProject = {
    coopname,
    project_hash: projectHash,
    username,
  }

  const refreshResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.RefreshProject.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: refreshData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(refreshResult)
  expect(refreshResult.transaction_id).toBeDefined()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const projectWalletAfter = await getProjectWallet(blockchain, coopname, projectHash, username)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CRPS:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletAfter)

  console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CRPS –ø–∞–π—â–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`)

  return {
    transactionId: refreshResult.transaction_id,
    transaction: refreshResult,
    projectWalletBefore,
    projectWalletAfter,
  }
}
