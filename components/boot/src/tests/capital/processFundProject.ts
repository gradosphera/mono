import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { getProjectWallet } from './getProjectWallet'

export async function processFundProject(
  blockchain: any,
  coopname: string,
  projectHash: string,
  amount: string,
  memo: string = '–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
) {
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–µ–∫—Ç=${projectHash}, —Å—É–º–º–∞=${amount}, memo=${memo}`)

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
  const projectWalletBefore = await getProjectWallet(blockchain, coopname, projectHash, coopname)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –î–û —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletBefore)

  // –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  const fundData: CapitalContract.Actions.FundProject.IFundProject = {
    coopname,
    project_hash: projectHash,
    amount,
    memo,
  }

  const fundResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.FundProject.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: fundData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(fundResult)
  expect(fundResult.transaction_id).toBeDefined()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
  const projectWalletAfter = await getProjectWallet(blockchain, coopname, projectHash, coopname)

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ü–û–°–õ–ï —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:')
  console.log('‚ñ∂ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', projectWalletAfter)

  console.log(`\n‚úÖ –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!`)

  return {
    transactionId: fundResult.transaction_id,
    transaction: fundResult,
    projectWalletBefore,
    projectWalletAfter,
  }
}
