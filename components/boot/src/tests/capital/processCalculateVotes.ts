import { expect } from 'vitest'
import { CapitalContract } from 'cooptypes'
import type Blockchain from '../../blockchain'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { makeCombinedChecksum256NameIndexKey } from '../shared/combinedKeys'

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É –í–æ–¥—è–Ω–æ–≤–∞
 * @param blockchain —ç–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω–∞
 * @param data –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤
 */
export async function processCalculateVotes(
  blockchain: Blockchain,
  data: CapitalContract.Actions.CalculateVotes.IFinalVoting,
) {
  const { coopname, username, project_hash } = data

  console.log(`\nüßÆ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${username} –≤ –ø—Ä–æ–µ–∫—Ç–µ ${project_hash}`)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const projectBefore = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    project_hash,
    project_hash,
    3,
    'sha256',
  ))[0]

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ: –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const segmentKey = makeCombinedChecksum256NameIndexKey(project_hash, username)
  const segmentBefore = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'segments',
    1,
    segmentKey,
    segmentKey,
    3,
    'i128',
  ))[0]

  // console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤:')
  // console.log('‚ñ∂ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:', projectBefore.status)
  // console.log('‚ñ∂ –ì–æ–ª–æ—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:', projectBefore.voting.votes_received)
  // console.log('‚ñ∂ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', projectBefore.voting.total_voters)
  // console.log(`‚ñ∂ –°–µ–≥–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${username}:`)
  // console.log('  - voting_bonus:', segmentBefore.voting_bonus)
  // console.log('  - equal_author_bonus:', segmentBefore.equal_author_bonus)
  // console.log('  - direct_creator_bonus:', segmentBefore.direct_creator_bonus)
  // console.log('  - total_segment_cost:', segmentBefore.total_segment_cost)

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤
  const txResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.CalculateVotes.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data,
        },
      ],
    },
    { blocksBehind: 3, expireSeconds: 30 },
  )
  getTotalRamUsage(txResult)
  expect(txResult.transaction_id).toBeDefined()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
  const projectAfter = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'projects',
    1,
    project_hash,
    project_hash,
    3,
    'sha256',
  ))[0]

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ: –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const segmentAfter = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'segments',
    1,
    segmentKey,
    segmentKey,
    3,
    'i128',
  ))[0]

  console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤:')
  console.log('‚ñ∂ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:', projectAfter.status)
  console.log(`‚ñ∂ –°–µ–≥–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${username}:`)
  console.log('  - voting_bonus:', segmentAfter.voting_bonus)
  console.log('  - total_voting_pool:', projectAfter.voting.amounts.total_voting_pool)
  console.log('  - active_voting_amount:', projectAfter.voting.amounts.active_voting_amount)
  console.log('  - equal_voting_amount:', projectAfter.voting.amounts.equal_voting_amount)

  return {
    txId: txResult.transaction_id,
    projectBefore,
    projectAfter,
    segmentBefore,
    segmentAfter,
  }
}
