import { expect } from 'vitest'
import { CapitalContract, GatewayContract } from 'cooptypes'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { processLastDecision } from '../soviet/processLastDecision'
import type Blockchain from '../../blockchain'
import { formatDateToISOString } from '../shared/formatDateToISOString'
import { processApprove } from './processApprove'
import { getSegment } from './getSegment'

export async function processDebt(
  blockchain: Blockchain,
  coopname: string,
  username: string,
  projectHash: string,
  debtAmount: string,
  fakeDocument: any,
  repaidAtDate: Date,
) {
  const debtHash = generateRandomSHA256()
  console.log(`\nüîπ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞: ${debtHash}`)

  // –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
  const repaidAt = formatDateToISOString(repaidAtDate)

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞
  const segmentBefore = await getSegment(blockchain, coopname, projectHash, username)
  console.log('üìä –°–µ–≥–º–µ–Ω—Ç –¥–æ –¥–æ–ª–≥–∞:', segmentBefore)

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞
  const contributorsBefore = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'contributors',
    1,
    username,
    username,
    2,
    'i64',
  ))
  const contributorBefore = contributorsBefore[0]
  console.log('üìä –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä –¥–æ –¥–æ–ª–≥–∞:', contributorBefore)

  fakeDocument.signatures[0].signer = username

  // 1. –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥
  const createDebtData: CapitalContract.Actions.CreateDebt.ICreateDebt = {
    coopname,
    username,
    debt_hash: debtHash,
    project_hash: projectHash,
    amount: debtAmount,
    repaid_at: repaidAt,
    statement: fakeDocument,
  }

  console.log(`\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ CreateDebt –¥–ª—è ${username} –Ω–∞ —Å—É–º–º—É ${debtAmount}`)
  const createDebtResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: CapitalContract.contractName.production,
          name: CapitalContract.Actions.CreateDebt.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: createDebtData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(createDebtResult)
  expect(createDebtResult.transaction_id).toBeDefined()
  console.log('‚úÖ –î–æ–ª–≥ —Å–æ–∑–¥–∞–Ω:', debtHash)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–ª–≥ —Å–æ–∑–¥–∞–ª—Å—è
  const debts = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'debts',
    1,
    debtHash,
    debtHash,
    3,
    'sha256',
  ))
  const createdDebt = debts[0]
  console.log('üîç –î–æ–ª–≥ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:', createdDebt)
  expect(createdDebt).toBeDefined()
  expect(createdDebt.status).toBe('created')

  // 2. –û–¥–æ–±—Ä—è–µ–º –¥–æ–ª–≥ —á–µ—Ä–µ–∑ processApprove (soviet –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
  console.log(`\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–≥–∞ ${debtHash} —á–µ—Ä–µ–∑ soviet`)
  await processApprove(blockchain, coopname, debtHash)
  console.log('‚úÖ –î–æ–ª–≥ –æ–¥–æ–±—Ä–µ–Ω —Å–æ–≤–µ—Ç–æ–º')

  // 3. –ü—Ä–æ—Ü–µ—Å—Å–∏–º —Ä–µ—à–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞
  await processLastDecision(blockchain, coopname)
  console.log('‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–æ')

  // 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ (gateway —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç callback –Ω–∞ capital)
  const confirmOutcomeData: GatewayContract.Actions.CompleteOutcome.ICompleteOutcome = {
    coopname,
    outcome_hash: debtHash,
  }

  console.log(`\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞`)
  const confirmResult = await blockchain.api.transact(
    {
      actions: [
        {
          account: GatewayContract.contractName.production,
          name: GatewayContract.Actions.CompleteOutcome.actionName,
          authorization: [{ actor: coopname, permission: 'active' }],
          data: confirmOutcomeData,
        },
      ],
    },
    {
      blocksBehind: 3,
      expireSeconds: 30,
    },
  )

  getTotalRamUsage(confirmResult)
  expect(confirmResult.transaction_id).toBeDefined()
  console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const segmentAfter = await getSegment(blockchain, coopname, projectHash, username)

  const contributorsAfter = (await blockchain.getTableRows(
    CapitalContract.contractName.production,
    coopname,
    'contributors',
    1,
    username,
    username,
    2,
    'i64',
  ))
  const contributorAfter = contributorsAfter[0]

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–≥–∞:')
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –¥–æ:', segmentBefore)
  console.log('‚ñ∂ –°–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ:', segmentAfter)
  console.log('‚ñ∂ –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä –¥–æ:', contributorBefore)
  console.log('‚ñ∂ –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä –ø–æ—Å–ª–µ:', contributorAfter)

  console.log(`\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–ª–≥–∞ –Ω–∞ ${debtAmount} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`)

  return {
    debtHash,
    debt: createdDebt,
    segmentBefore,
    segmentAfter,
    contributorBefore,
    contributorAfter,
    transactionId: confirmResult.transaction_id,
  }
}
