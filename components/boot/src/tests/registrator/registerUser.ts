import { GatewayContract, RegistratorContract, SovietContract } from 'cooptypes'
import { expect } from 'vitest'
import { generateRandomSHA256 } from '../../utils/randomHash'
import { getTotalRamUsage } from '../../utils/getTotalRamUsage'
import { processDecision } from '../soviet/processDecision'
import { getParticipant } from '../registrator/getParticipant'
import { fakeDocument } from '../soviet/fakeDocument'
import { compareTokenAmounts, getCoopWallet } from '../wallet/walletUtils'

export async function registerUser(blockchain: any, coopname: string, username: string) {
  const registration_hash = generateRandomSHA256()

  const account = await blockchain.generateKeypair(username, undefined, '–ê–∫–∫–∞—É–Ω—Ç –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞')

  // üîπ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const prevCoopWallet = await getCoopWallet(blockchain, coopname)
  const prevAvailable = prevCoopWallet?.circulating_account?.available || '0.0000 RUB'
  const prevInitial = prevCoopWallet?.initial_account?.available || '0.0000 RUB'
  console.log('üì¶ CoopWallet BEFORE:', prevCoopWallet)

  // üîπ 1. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  {
    const data: RegistratorContract.Actions.CreateAccount.ICreateAccount = {
      coopname,
      referer: '',
      username,
      public_key: account.publicKey,
      meta: '',
    }

    const result = await blockchain.api.transact({
      actions: [{
        account: RegistratorContract.contractName.production,
        name: RegistratorContract.Actions.CreateAccount.actionName,
        authorization: [{ actor: coopname, permission: 'active' }],
        data,
      }],
    }, { blocksBehind: 3, expireSeconds: 30 })

    getTotalRamUsage(result)
    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω')
  }

  // üîπ 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–π—â–∏–∫–∞
  {
    const data: RegistratorContract.Actions.RegisterUser.IRegisterUser = {
      coopname,
      braname: '',
      username,
      type: 'individual',
      statement: fakeDocument,
      registration_hash,
    }

    const result = await blockchain.api.transact({
      actions: [{
        account: RegistratorContract.contractName.production,
        name: RegistratorContract.Actions.RegisterUser.actionName,
        authorization: [{ actor: coopname, permission: 'active' }],
        data,
      }],
    }, { blocksBehind: 3, expireSeconds: 30 })

    getTotalRamUsage(result)
    console.log('‚úÖ –ü–∞–π—â–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
  }

  // üîπ 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞
  {
    const data: GatewayContract.Actions.CompleteIncome.ICompeteIncome = {
      coopname,
      income_hash: registration_hash,
    }

    const result = await blockchain.api.transact({
      actions: [{
        account: GatewayContract.contractName.production,
        name: GatewayContract.Actions.CompleteIncome.actionName,
        authorization: [{ actor: coopname, permission: 'active' }],
        data,
      }],
    }, { blocksBehind: 3, expireSeconds: 30 })

    getTotalRamUsage(result)
    console.log('‚úÖ –ü—Ä–∏—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
  }

  // üîπ 4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
  const decisions = await blockchain.getTableRows(
    SovietContract.contractName.production,
    coopname,
    'decisions',
    1000,
  )
  const lastDecision = decisions.at(-1)
  console.log('üìú –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ:', lastDecision)
  await processDecision(blockchain, lastDecision.id)
  console.log('‚úÖ –†–µ—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')

  // üîπ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const participant = await getParticipant(blockchain, coopname, username)
  console.log('üôã –£—á–∞—Å—Ç–Ω–∏–∫:', participant)

  expect(participant).toBeDefined()
  expect(participant.has_vote).toBe(1)
  expect(participant.status).toBe('accepted')
  expect(participant.username).toBe(username)

  // üîπ 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const coopWalletAfter = await getCoopWallet(blockchain, coopname)
  const newAvailable = coopWalletAfter?.circulating_account?.available || '0.0000 RUB'
  const newInitial = coopWalletAfter?.initial_account?.available || '0.0000 RUB'

  console.log('üí∞ CoopWallet AFTER:', coopWalletAfter)

  const minAmount = parseFloat(participant.minimum_amount.split(' ')[0])
  const initAmount = parseFloat(participant.initial_amount.split(' ')[0])

  compareTokenAmounts(prevAvailable, newAvailable, minAmount)
  compareTokenAmounts(prevInitial, newInitial, initAmount)

  return participant
}
