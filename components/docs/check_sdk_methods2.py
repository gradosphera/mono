import sys
import os
sys.path.append('.')
import main

# –ò–º–∏—Ç–∏—Ä—É–µ–º env –¥–ª—è –º–∞–∫—Ä–æ—Å–æ–≤
class FakeEnv:
    def __init__(self):
        self.variables = {}

env = FakeEnv()

# –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–º–ø–æ—Ä—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
import importlib
importlib.reload(main)

# –ó–∞–ø—É—Å–∫–∞–µ–º define_env
main.define_env(env)

# –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
test_methods = [
    ("Mutations", "Accounts", "RegisterAccount"),
    ("Mutations", "Account", "DeleteAccount"),
    ("Mutations", "Payments", "CreateDepositPayment"),
    ("Mutations", "Gateway", "CreateDepositPayment"),
    ("Mutations", "Wallet", "CreateDepositPayment"),
    ("Classes", "Account"),
    ("Classes", "Canvas"),
]

print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SDK –º–µ—Ç–æ–¥–æ–≤:")
for method_args in test_methods:
    try:
        result = env.variables['get_sdk_doc'](*method_args)
        if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result:
            print(f"‚ùå {'.'.join(method_args)}: {result}")
        else:
            print(f"‚úÖ {'.'.join(method_args)}: –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"üí• {'.'.join(method_args)}: –æ—à–∏–±–∫–∞ - {e}")
