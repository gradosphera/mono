import os
import json

def define_env(env):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–∫—Ä–æ—Å–æ–≤ –¥–ª—è MkDocs"""
    print("‚úÖ Macros –∑–∞–≥—Ä—É–∂–µ–Ω!")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏

    # --- SDK LINKS ---
    sdk_docs_path = "docs/sdk"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ SDK –≤ MkDocs
    sdk_doc_links = {}

    SDK_LINK_PREFIX = "üõ†Ô∏è SDK: "  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ SDK

    # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é SDK
    for root, _, files in os.walk(sdk_docs_path):
        for file in files:
            if file.endswith(".html"):
                method_name = file[:-5]  # –£–±–∏—Ä–∞–µ–º .html –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–Ω–µ –æ—Ç "docs/", –∞ –æ—Ç –∫–æ—Ä–Ω—è MkDocs)
                rel_path = os.path.relpath(os.path.join(root, file), "docs/sdk")
                web_path = f"/sdk/{rel_path}".replace(os.sep, "/")  # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—É—Ç–∏

                sdk_doc_links[method_name] = web_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å

    # --- GRAPHQL (SpectaQL) LINKS ---
    graphql_index_path = os.path.relpath("graphql/index.html", "docs")  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    graphql_web_path = f"/{graphql_index_path}".replace(os.sep, "/")  # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—É—Ç–∏

    GRAPHQL_LINK_PREFIX = "üîó GraphQL API: "  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ GraphQL

    # --- TYPE DOC LINKS (JSON –ª–µ–∂–∏—Ç –≤ docs/sdk) ---
    typedoc_path = os.path.join(sdk_docs_path, "typedoc.json")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –≤ SDK
    typedoc_data = {}

    if os.path.exists(typedoc_path):
        with open(typedoc_path, "r", encoding="utf-8") as f:
            typedoc_data = json.load(f)
    else:
        print(f"‚ö†Ô∏è TypeDoc JSON ({typedoc_path}) –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–∞–∫—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

    # ----------------------------------------------------------------
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # ----------------------------------------------------------------

    def get_sdk_doc(*args):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ç–æ–¥ SDK, –ø—Ä–∏–Ω–∏–º–∞—è –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        full_name = ".".join(args)  # –°–∫–ª–µ–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        if full_name in sdk_doc_links:
            return f"{SDK_LINK_PREFIX}[{full_name}]({sdk_doc_links[full_name]})"

        return f"‚ö†Ô∏è {SDK_LINK_PREFIX}{full_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"

    def get_graphql_doc(reference: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GraphQL Query, Mutation –∏–ª–∏ Definition"""
        if not reference:
            return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π GraphQL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reference –∏–∑ "Query.getAccount" ‚Üí "query-getAccount"
        parts = reference.split(".")
        reference_link = "-".join([parts[0].lower()] + parts[1:])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ index.html#reference
        link = f"{graphql_web_path}#{reference_link}"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É reference –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        display_text = reference[0].upper() + reference[1:]

        return f"{GRAPHQL_LINK_PREFIX}[{display_text}]({link})"

    def get_graphql_definition(definition_name: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GraphQL-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"""
        if not definition_name:
            return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"

        link = f"{graphql_web_path}#definition-{definition_name}"
        return f"[`{definition_name}`]({link})"

    def get_class_doc(*args):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∞—Å—Å –∏–ª–∏ –º–µ—Ç–æ–¥ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –≤ TypeDoc JSON"""
        if len(args) < 1:
            return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `Namespace.ClassName`"

        class_name = ".".join(args[:-1]) if len(args) > 1 else args[0]
        method_name = args[-1] if len(args) > 1 else None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å
        class_link = f"/sdk/classes/{class_name}.html"
        if method_name:
            class_link += f"#{method_name}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        display_text = f"{class_name}.{method_name}" if method_name else class_name

        return f"üõ†Ô∏è [`{display_text}`]({class_link})"


    # ----------------------------------------------------------------
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è TypeDoc
    # ----------------------------------------------------------------

    def find_variable(namespace_path, variable_name, node):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –º–µ—Ç–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–µ–π–º—Å–ø–µ–π—Å–æ–≤
        """
        if "children" not in node:
            return None

        for child in node["children"]:
            # –ï—Å–ª–∏ —ç—Ç–æ namespace (kind = 4), —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–≥–ª—É–±–ª—è–µ–º—Å—è
            if child.get("kind") == 4:
                if namespace_path and child["name"] == namespace_path[0]:
                    return find_variable(namespace_path[1:], variable_name, child)

            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–∫–æ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –º–µ—Ç–æ–¥ –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ (kind –≤ [32, 64, 4])
            if child["name"] == variable_name and child.get("kind") in [32, 64, 4]:
                return child

        return None

    def get_typedoc_desc(namespace_variable):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ (summary/@example) –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π/–º–µ—Ç–æ–¥–∞ –∏–∑ TypeDoc JSON"""
        parts = namespace_variable.split(".")
        if len(parts) < 2:
            return f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `Namespace.Variable`"

        namespace_path, variable_name = parts[:-1], parts[-1]

        variable = find_variable(namespace_path, variable_name, typedoc_data)
        if not variable:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è {namespace_variable}")
            return f"‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è `{namespace_variable}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º summary
        markdown_blocks = []
        if "comment" in variable and "summary" in variable["comment"]:
            for item in variable["comment"]["summary"]:
                if item["kind"] == "text":
                    markdown_blocks.append(item["text"].strip())
                elif item["kind"] == "code":
                    markdown_blocks.append(f"\n\n{item['text'].strip()}\n\n")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º @example
        if "comment" in variable and "blockTags" in variable["comment"]:
            for tag in variable["comment"]["blockTags"]:
                if tag["tag"] == "@example":
                    for content in tag.get("content", []):
                        if content["kind"] == "code":
                            markdown_blocks.append(f"\n\n{content['text'].strip()}\n\n")

        return "\n\n".join(markdown_blocks) if markdown_blocks else "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    def get_typedoc_value(namespace_variable):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ (const/var) –∏–∑ TypeDoc JSON"""
        parts = namespace_variable.split(".")
        if len(parts) < 2:
            return f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `Namespace.Variable`"

        namespace_path, variable_name = parts[:-1], parts[-1]
        variable = find_variable(namespace_path, variable_name, typedoc_data)

        if not variable:
            return f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è `{namespace_variable}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ (kind = 32 –∏ isConst = true)
        if variable.get("kind") == 32 and variable.get("flags", {}).get("isConst", False):
            if "type" in variable and "value" in variable["type"]:
                return variable["type"]["value"]
            elif "defaultValue" in variable:
                return variable["defaultValue"]

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è/–º–µ—Ç–æ–¥
        if "defaultValue" in variable:
            return variable["defaultValue"]

        return f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è `{namespace_variable}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # ----------------------------------------------------------------
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    # ----------------------------------------------------------------

    def find_interface(parent_node, interface_name, debug_print):
        """–í–Ω—É—Ç—Ä–∏ parent_node['children'] –∏—â–µ–º –æ–±—ä–µ–∫—Ç c name=interface_name"""
        if "children" not in parent_node:
            return None
        for child in parent_node["children"]:
            debug_print(f"[DEBUG] –°–º–æ—Ç—Ä–∏–º child: id={child.get('id')}, name={child.get('name')}")
            if child.get("name") == interface_name:
                debug_print(f"[DEBUG] –ù–∞–π–¥–µ–Ω {interface_name}: id={child.get('id')}")
                return child
        return None

    def find_by_id(type_id, node, debug_print):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ typedoc_data –ø–æ ID.
        –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ type.declaration, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        """
        if node.get("id") == type_id:
            debug_print(f"[DEBUG] find_by_id: –ù–∞—à–ª–∏: id={node['id']}, name={node.get('name')}")
            return node

        for c in node.get("children", []):
            found = find_by_id(type_id, c, debug_print)
            if found:
                return found

        if "type" in node and "declaration" in node["type"]:
            decl = node["type"]["declaration"]
            found_decl = find_by_id(type_id, decl, debug_print)
            if found_decl:
                return found_decl

        return None

    def build_reflection_obj(declaration, typedoc_data, debug_print, indent=2):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç { ... } –¥–ª—è reflection."""
        lines = ["{"]
        fields = extract_fields(declaration, typedoc_data, debug_print, indent + 2)
        lines.extend(fields)
        lines.append(f"{' ' * indent}}}")
        return "\n".join(lines)

    def get_type_string(type_obj, typedoc_data, debug_print, indent=0):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ (recursive):
         1) name
         2) union => "a | b | c"
         3) literal => "DocumentPackage"/"abc"/null
         4) reflection => build_reflection_obj(...)
         5) array => elementType[]
         6) indexedAccess => objectType[indexType]
         7) reference (id) => find_by_id(...) -> name/inline object
         8) unknown
        """
        # 1) –ï—Å—Ç—å name?
        if "name" in type_obj:
            debug_print(f"[DEBUG] get_type_string: –∏—Å–ø–æ–ª—å–∑—É–µ–º name={type_obj['name']}")
            return type_obj["name"]

        # 2) union
        if type_obj.get("type") == "union" and "types" in type_obj:
            subtypes = []
            for st in type_obj["types"]:
                subtypes.append(get_type_string(st, typedoc_data, debug_print, indent))
            union_str = " | ".join(subtypes)
            debug_print(f"[DEBUG] get_type_string: union => {union_str}")
            return union_str

        # 3) literal (–Ω–∞–ø—Ä–∏–º–µ—Ä, null, "DocumentPackage")
        if type_obj.get("type") == "literal":
            val = type_obj.get("value")
            if val is None:
                return "null"
            if isinstance(val, str):
                return f"\"{val}\""
            return str(val)

        # 4) reflection
        if type_obj.get("type") == "reflection" and "declaration" in type_obj:
            debug_print("[DEBUG] get_type_string: reflection => —Å—Ç—Ä–æ–∏–º –æ–±—ä–µ–∫—Ç")
            return build_reflection_obj(type_obj["declaration"], typedoc_data, debug_print, indent)

        # 5) array
        if type_obj.get("type") == "array" and "elementType" in type_obj:
            debug_print("[DEBUG] get_type_string: array => elementType[]")
            el_type_str = get_type_string(type_obj["elementType"], typedoc_data, debug_print, indent)
            return f"{el_type_str}[]"

        # 6) indexedAccess => obj[idx]
        if type_obj.get("type") == "indexedAccess":
            debug_print("[DEBUG] get_type_string: indexedAccess => objectType[indexType]")
            obj_type = type_obj.get("objectType", {})
            idx_type = type_obj.get("indexType", {})

            obj_str = get_type_string(obj_type, typedoc_data, debug_print, indent)
            idx_str = get_type_string(idx_type, typedoc_data, debug_print, indent)

            return f"{obj_str}[{idx_str}]"

        # 7) reference –ø–æ id
        if "id" in type_obj:
            ref_id = type_obj["id"]
            debug_print(f"[DEBUG] get_type_string: –∏—â–µ–º ref –ø–æ id={ref_id}")
            ref_item = find_by_id(ref_id, typedoc_data, debug_print)
            if ref_item:
                debug_print(f"[DEBUG] ref_item –Ω–∞–π–¥–µ–Ω: id={ref_item['id']}, name={ref_item.get('name')}")
                # –ï—Å–ª–∏ –µ—Å—Ç—å ref_item["type"]["declaration"]
                if "type" in ref_item and "declaration" in ref_item["type"]:
                    debug_print("[DEBUG] ref_item —Å–æ–¥–µ—Ä–∂–∏—Ç declaration => —Å—Ç—Ä–æ–∏–º –æ–±—ä–µ–∫—Ç")
                    return build_reflection_obj(ref_item["type"]["declaration"], typedoc_data, debug_print, indent)
                return ref_item.get("name", "unknown")
            else:
                debug_print(f"[DEBUG] ref_item —Å id={ref_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return "unknown"

        # 8) –ò–Ω–∞—á–µ unknown
        return "unknown"

    def extract_fields(declaration, typedoc_data, debug_print, indent=2):
        """
        –û–±—Ö–æ–¥–∏–º declaration['children'], —Ñ–æ—Ä–º–∏—Ä—É—è —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
          fieldName?: <type>; // comment
          –ò–õ–ò
          fieldName?: {
            ...
          };
        """
        fields = []
        for field in declaration.get("children", []):
            field_name = field["name"]
            debug_print(f"[DEBUG] extract_fields: –ø–æ–ª–µ={field_name}")
            is_optional = field.get("flags", {}).get("isOptional", False)
            question_mark = "?" if is_optional else ""

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞
            field_type_str = get_type_string(field.get("type", {}), typedoc_data, debug_print, indent + 2)

            # –ï—Å–ª–∏ —É –ø–æ–ª—è –µ—Å—Ç—å declaration, –∑–Ω–∞—á–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            if "declaration" in field.get("type", {}):
                nested_lines = extract_fields(field["type"]["declaration"], typedoc_data, debug_print, indent + 2)
                fields.append(f"{' ' * indent}{field_name}{question_mark}: {{")
                fields.extend(nested_lines)
                fields.append(f"{' ' * indent}}};")
            else:
                # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                field_desc = ""
                if "comment" in field and "summary" in field["comment"]:
                    field_desc = " // " + " ".join(
                        item["text"] for item in field["comment"]["summary"] if "text" in item
                    )
                fields.append(f"{' ' * indent}{field_name}{question_mark}: <{field_type_str}>;{field_desc}")
        return fields

    # ----------------------------------------------------------------
    # –ú–∞–∫—Ä–æ—Å 1: IInput + –ø—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
    # ----------------------------------------------------------------
    def get_typedoc_input(namespace_variable, interface_name="IInput"):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∑–∞–ø—Ä–æ—Å/–º—É—Ç–∞—Ü–∏—è):
          import { Mutations } from '@coopenomics/sdk';
          const variables = Mutations.[namespaceVariable].[interfaceName];
          const { ... } = await client.Mutation(...);

        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ—Ç interface_name="IInput".
        """
        isDebug = False
        def debug_print(*args):
            if isDebug:
                print(*args)

        parts = namespace_variable.split(".")
        if len(parts) < 2:
            return f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `Namespace.Method`"

        root_namespace, *namespace_path, variable_name = parts
        if root_namespace not in {"Mutations", "Queries"}:
            return f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π namespace `{root_namespace}`"

        debug_print(f"[DEBUG] –ò—â–µ–º variable: {namespace_variable}")
        variable = find_variable([root_namespace] + namespace_path, variable_name, typedoc_data)
        if not variable:
            return f"‚ö†Ô∏è `{namespace_variable}` –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–Ω—É—Ç—Ä–∏ variable
        interface_obj = find_interface(variable, interface_name, debug_print)
        if not interface_obj:
            return f"‚ö†Ô∏è `{interface_name}` –¥–ª—è `{namespace_variable}` –Ω–µ –Ω–∞–π–¥–µ–Ω"

        debug_print(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å {interface_name}, id={interface_obj.get('id')}")
        interface_fields = extract_fields(interface_obj, typedoc_data, debug_print)

        # –†–µ—à–∞–µ–º, Mutation –∏–ª–∏ Query
        operation_type = "Query" if root_namespace == "Queries" else "Mutation"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è variables
        interface_path = f"{root_namespace}.{'.'.join(namespace_path)}.{variable_name}.{interface_name}"

        ts_code = [
            "\n",
            "```typescript",
            f"import {{ {root_namespace} }} from '@coopenomics/sdk';\n",
            f"const variables: {interface_path} = {{",  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π variables
            *interface_fields,
            "};\n",
            f"const {{ [{root_namespace}.{'.'.join(namespace_path)}.{variable_name}.name]: result }} = await client.{operation_type}(",
            f"  {root_namespace}.{'.'.join(namespace_path)}.{variable_name}.{operation_type.lower()},",
            "  { variables }",
            ");",
            "```"
        ]
        return "\n".join(ts_code)

    # ----------------------------------------------------------------
    # –ú–∞–∫—Ä–æ—Å 2: IOutput (–∏–ª–∏ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    # ----------------------------------------------------------------
    def get_typedoc_definition(namespace_variable_or_interface_name, interface_name=None):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

        1) –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω `namespace_variable_or_interface_name` –≤–∏–¥–∞ "Mutations.Payments.CreateDepositPayment",
           –∏—â–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å `interface_name` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "IOutput") –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.

        2) –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç–æ "DocumentPackage", –∏—â–µ–º –ø–æ –≤—Å–µ–º—É `typedoc_data`.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç **—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞**, –Ω–∞–ø—Ä–∏–º–µ—Ä:
          ```typescript
          interface SomeInterface {
            ...
          }
          ```
        """

        isDebug = False
        def debug_print(*args):
            if isDebug:
                print(*args)

        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–¥–∞–ª–∏
        if not interface_name:
            interface_name = namespace_variable_or_interface_name

        parts = namespace_variable_or_interface_name.split(".")
        if len(parts) >= 2 and parts[0] in {"Mutations", "Queries"}:
            # –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ Mutations/Queries
            root_namespace, *namespace_path, variable_name = parts

            debug_print(f"[DEBUG] (Definition) –ò—â–µ–º variable: {namespace_variable_or_interface_name}")
            variable = find_variable([root_namespace] + namespace_path, variable_name, typedoc_data)
            if not variable:
                return f"‚ö†Ô∏è `{namespace_variable_or_interface_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–Ω—É—Ç—Ä–∏ variable
            debug_print(f"[DEBUG] –ò—â–µ–º {interface_name} –≤–Ω—É—Ç—Ä–∏ {variable.get('name')}")
            interface_obj = find_interface(variable, interface_name, debug_print)
            if not interface_obj:
                return f"‚ö†Ô∏è `{interface_name}` –¥–ª—è `{namespace_variable_or_interface_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω"

            debug_print(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å {interface_name}, id={interface_obj.get('id')}")

            return _extract_interface(interface_obj, interface_name, debug_print)

        else:
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            debug_print(f"[DEBUG] (Definition) –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ {namespace_variable_or_interface_name}")
            return _get_typedoc_definition_global(namespace_variable_or_interface_name, debug_print)


    def _extract_interface(interface_obj, interface_name, debug_print):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å type.reflection => –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä—å declaration.children
        –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π child => __type, –∑–∞—Ö–æ–¥–∏–º –≥–ª—É–±–∂–µ
        """
        # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ type.reflection => —É—Ö–æ–¥–∏–º –≤ declaration
        if "type" in interface_obj and "declaration" in interface_obj["type"]:
            debug_print(f"[DEBUG] –£ {interface_name} –Ω–∞–π–¥–µ–Ω reflection => –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤ declaration")
            interface_obj = interface_obj["type"]["declaration"]

        # –ï—Å–ª–∏ –æ–¥–∏–Ω child => –ø–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ __type
        if "children" in interface_obj and len(interface_obj["children"]) == 1:
            maybe_decl = interface_obj["children"][0]
            if "children" in maybe_decl:
                debug_print(f"[DEBUG] –£ {interface_name} –æ–¥–∏–Ω children (__type) ‚Üí —É–≥–ª—É–±–ª—è–µ–º—Å—è")
                interface_obj = maybe_decl

        interface_fields = extract_fields(interface_obj, typedoc_data, debug_print)

        ts_code = [
            "\n",
            "```typescript",
            f"interface {interface_name} {{",
            *interface_fields,
            "}",
            "```"
        ]
        return "\n".join(ts_code)


    def _get_typedoc_definition_global(interface_name, debug_print):
        """
        –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ 'interface_name' –≤–æ –≤—Å–µ–º `typedoc_data`.
        –¢–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–µ—á–∞—Ç–∞–µ–º –∏—Ö –ø—É—Ç–∏, –∞ –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ.
        """

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –í–°–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∞ –Ω–µ –ø–µ—Ä–≤–æ–µ.
        def _find_all_by_name_deep(name_to_find, node, path):
            """
            –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö node["name"] == name_to_find.
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–ø—É—Ç—å[], —Å–∞–º_–æ–±—ä–µ–∫—Ç).
            
            path - –º–∞—Å—Å–∏–≤, —Ö—Ä–∞–Ω—è—â–∏–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è typedoc_data –¥–æ —Ç–µ–∫—É—â–µ–≥–æ node.
            """
            results = []
            current_name = node.get("name")
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏?
            if current_name == name_to_find:
                results.append((path + [current_name], node))

            # 1) –î–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –≤ children
            for child in node.get("children", []):
                child_name = child.get("name", "child")
                results.extend(_find_all_by_name_deep(name_to_find, child, path + [child_name]))

            # 2) –ü–æ–∏—Å–∫ –≤ type.declaration, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "type" in node and "declaration" in node["type"]:
                decl = node["type"]["declaration"]
                decl_name = decl.get("name", "__decl__")
                results.extend(_find_all_by_name_deep(name_to_find, decl, path + [decl_name]))

            return results

        # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ typedoc_data
        found_nodes = _find_all_by_name_deep(interface_name, typedoc_data, [])

        if not found_nodes:
            return f"‚ö†Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å `{interface_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ typedoc_data"

        # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏ id
        debug_print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(found_nodes)}")
        for i, (path_list, node) in enumerate(found_nodes, start=1):
            path_str = " -> ".join(path_list)
            print(f"[DEBUG] #{i}: path={path_str}, id={node.get('id')}")

        # –ë–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (ModelTypes) –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        main_node = found_nodes[1][1]
        print(f"[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –Ω–æ–¥—É: id={main_node.get('id')}")
        return _extract_interface(main_node, interface_name, debug_print)

    def _find_by_name_deep(name_to_find, node, debug_print):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ `name_to_find` –≤–Ω—É—Ç—Ä–∏:
        - node["children"]
        - node["type"]["declaration"]["children"]
        """
        if node.get("name") == name_to_find:
            debug_print(f"[DEBUG] _find_by_name_deep: –ù–∞—à–ª–∏ {name_to_find} –≤ node id={node.get('id')}")
            return node

        for child in node.get("children", []):
            found = _find_by_name_deep(name_to_find, child, debug_print)
            if found:
                return found

        if "type" in node and "declaration" in node["type"]:
            decl = node["type"]["declaration"]
            found_decl = _find_by_name_deep(name_to_find, decl, debug_print)
            if found_decl:
                return found_decl

        return None

    # ----------------------------------------------------------------
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞–∫—Ä–æ—Å—ã
    # ----------------------------------------------------------------
    env.variables["get_sdk_doc"] = get_sdk_doc
    env.variables["get_graphql_doc"] = get_graphql_doc
    env.variables["get_graphql_definition"] = get_graphql_definition
    env.variables["get_class_doc"] = get_class_doc

    env.variables["get_typedoc_desc"] = get_typedoc_desc
    env.variables["get_typedoc_value"] = get_typedoc_value

    env.variables["get_typedoc_input"] = get_typedoc_input
    env.variables["get_typedoc_definition"] = get_typedoc_definition

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sdk_doc_links)} SDK –º–µ—Ç–æ–¥–æ–≤!")  # –ü—Ä–æ–≤–µ—Ä–∫–∞
    print(f"‚úÖ GraphQL —Å—Å—ã–ª–∫–∏ —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è! ({graphql_web_path})")  # –ü—Ä–æ–≤–µ—Ä–∫–∞
    print(f"‚úÖ TypeDoc JSON –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {typedoc_path}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞
