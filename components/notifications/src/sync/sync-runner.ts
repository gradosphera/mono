#!/usr/bin/env node

import { NovuSyncService } from './novu-sync.service';
import { existsSync } from 'fs';
import { join } from 'path';
import { watch } from 'chokidar';
import dotenv from 'dotenv';

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const config = {
  apiKey: process.env.NOVU_API_KEY || '',
  apiUrl: process.env.NOVU_API_URL || '',
};

async function runSync() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if (!config.apiKey) {
      throw new Error('‚ùå NOVU_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    if (!config.apiUrl) {
      throw new Error('‚ùå NOVU_API_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const syncService = new NovuSyncService(config);
    await syncService.upsertAllWorkflows();
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    
    return false;
  }
}

async function main() {
  const args = process.argv.slice(2);
  const isDev = args.includes('--dev') || process.env.NODE_ENV === 'development';
  
  if (isDev) {
    console.log('üì° –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
    const initialSyncSuccess = await runSync();
    
    if (!initialSyncSuccess) {
      console.error('‚ùå –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      process.exit(1);
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –≤–æ—Ä–∫—Ñ–ª–æ—É –∏ —Ç–∏–ø–æ–≤
    const workflowsPath = join(__dirname, '../workflows');
    const typesPath = join(__dirname, '../types');
    
    const watchPaths = [];
    if (existsSync(workflowsPath)) {
      watchPaths.push(workflowsPath);
    }
    if (existsSync(typesPath)) {
      watchPaths.push(typesPath);
    }
    
    if (watchPaths.length > 0) {
      console.log('üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤:', watchPaths.join(', '));
      
      let syncTimeout: NodeJS.Timeout | null = null;
      
      const watcher = watch(watchPaths, {
        ignored: /node_modules/,
        persistent: true,
        ignoreInitial: true,
      });
      
      watcher.on('change', (path: string) => {
        console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: ${path}`);
        
        // –î–µ–±–∞—É–Ω—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        if (syncTimeout) {
          clearTimeout(syncTimeout);
        }
        
        syncTimeout = setTimeout(async () => {
          console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
          const success = await runSync();
          if (!success) {
            console.error('‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');
          }
        }, 1000);
      });
      
      watcher.on('add', (path: string) => {
        console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${path}`);
        if (syncTimeout) {
          clearTimeout(syncTimeout);
        }
        syncTimeout = setTimeout(async () => {
          console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
          const success = await runSync();
          if (!success) {
            console.error('‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');
          }
        }, 1000);
      });
      
      watcher.on('unlink', (path: string) => {
        console.log(`‚ûñ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${path}`);
        if (syncTimeout) {
          clearTimeout(syncTimeout);
        }
        syncTimeout = setTimeout(async () => {
          console.log('‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
          const success = await runSync();
          if (!success) {
            console.error('‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');
          }
        }, 1000);
      });
      
      console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞');
      
      // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
      process.on('SIGINT', () => {
        console.log('\nüëã –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        watcher.close();
        process.exit(0);
      });
    } else {
      console.log('‚ö†Ô∏è  –ü–∞–ø–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      process.exit(1);
    }
    
  } else {
    // Production —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
    const success = await runSync();
    process.exit(success ? 0 : 1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { runSync, NovuSyncService }; 