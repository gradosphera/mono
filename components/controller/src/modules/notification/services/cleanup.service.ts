import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import cron from 'node-cron';
import { WebPushSubscriptionService } from './web-push-subscription.service';

@Injectable()
export class CleanupService implements OnModuleInit {
  private readonly logger = new Logger(CleanupService.name);

  constructor(private readonly webPushSubscriptionService: WebPushSubscriptionService) {}

  onModuleInit() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
    cron.schedule('0 2 * * *', async () => {
      this.logger.log('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö push –ø–æ–¥–ø–∏—Å–æ–∫...');

      try {
        const deletedCount = await this.webPushSubscriptionService.cleanupInactiveSubscriptions(30);
        this.logger.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`);
      } catch (error: any) {
        this.logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:', error.message);
      }
    });

    // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ push –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00)
    cron.schedule('0 12 * * 0', async () => {
      this.logger.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ push –ø–æ–¥–ø–∏—Å–æ–∫...');

      try {
        const stats = await this.webPushSubscriptionService.getSubscriptionStats();

        this.logger.log(`üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ push –ø–æ–¥–ø–∏—Å–æ–∫:`);
        this.logger.log(`   –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${stats.total}`);
        this.logger.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}`);
        this.logger.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactive}`);
        this.logger.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.uniqueUsers}`);

        const activePercentage = stats.total > 0 ? ((stats.active / stats.total) * 100).toFixed(1) : '0';
        this.logger.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${activePercentage}%`);
      } catch (error: any) {
        this.logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      }
    });

    this.logger.log('node-cron –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–µ–±-–ø—É—à –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω—ã');
  }

  /**
   * –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  async manualCleanup(olderThanDays: number): Promise<number> {
    this.logger.log(`–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—à–µ ${olderThanDays} –¥–Ω–µ–π...`);

    const deletedCount = await this.webPushSubscriptionService.cleanupInactiveSubscriptions(olderThanDays);
    this.logger.log(`–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`);
    return deletedCount;
  }
}
