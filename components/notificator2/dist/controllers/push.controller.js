"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var PushController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushController = void 0;
const common_1 = require("@nestjs/common");
const web_push_service_1 = require("../services/web-push.service");
let PushController = PushController_1 = class PushController {
    constructor(webPushService) {
        this.webPushService = webPushService;
        this.logger = new common_1.Logger(PushController_1.name);
    }
    getVapidPublicKey() {
        const publicKey = this.webPushService.getVapidPublicKey();
        if (!publicKey) {
            throw new common_1.BadRequestException('VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞.');
        }
        return {
            publicKey,
            applicationServerKey: publicKey,
        };
    }
    subscribe(dto, userAgent) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.validateSubscription(dto.subscription);
                const subscription = yield this.webPushService.saveSubscription(dto.userId, dto.subscription, userAgent);
                this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dto.userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
                return {
                    success: true,
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                    subscriptionId: subscription.id,
                };
            }
            catch (error) {
                this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
                throw new common_1.BadRequestException(error.message);
            }
        });
    }
    unsubscribe(body) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!body.endpoint) {
                    throw new common_1.BadRequestException('Endpoint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏');
                }
                yield this.webPushService.removeSubscription(body.endpoint);
                this.logger.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${body.endpoint.substring(0, 50)}...`);
                return {
                    success: true,
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞',
                };
            }
            catch (error) {
                this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
                throw new common_1.BadRequestException(error.message);
            }
        });
    }
    getUserSubscriptions(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriptions = yield this.webPushService.getUserSubscriptions(userId);
            return {
                success: true,
                data: subscriptions.map(sub => ({
                    id: sub.id,
                    endpoint: sub.endpoint.substring(0, 50) + '...',
                    userAgent: sub.userAgent,
                    createdAt: sub.createdAt,
                    isActive: sub.isActive,
                })),
            };
        });
    }
    sendNotification(dto) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.validateNotificationPayload(dto);
                const payload = {
                    title: dto.title,
                    body: dto.body,
                    icon: dto.icon,
                    badge: dto.badge,
                    image: dto.image,
                    data: dto.data,
                    actions: dto.actions,
                    tag: dto.tag,
                    requireInteraction: dto.requireInteraction,
                    silent: dto.silent,
                    timestamp: Date.now(),
                    vibrate: dto.vibrate,
                };
                if (dto.userId) {
                    yield this.webPushService.sendNotificationToUser(dto.userId, payload);
                    this.logger.log(`Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.userId}`);
                }
                else {
                    yield this.webPushService.sendNotificationToAll(payload);
                    this.logger.log('Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
                }
                return {
                    success: true,
                    message: dto.userId
                        ? `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.userId}`
                        : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                };
            }
            catch (error) {
                this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
                throw new common_1.BadRequestException(error.message);
            }
        });
    }
    sendTestNotification(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                title: 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                body: '–í–∞—à–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
                icon: '/icons/notification-icon.png',
                badge: '/icons/badge-icon.png',
                tag: 'test-notification',
                data: {
                    type: 'test',
                    timestamp: Date.now(),
                },
                actions: [
                    {
                        action: 'view',
                        title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    },
                    {
                        action: 'dismiss',
                        title: '–ó–∞–∫—Ä—ã—Ç—å',
                    },
                ],
            };
            yield this.webPushService.sendNotificationToUser(userId, payload);
            return {
                success: true,
                message: `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
            };
        });
    }
    getStats() {
        return __awaiter(this, void 0, void 0, function* () {
            const stats = yield this.webPushService.getSubscriptionStats();
            return {
                success: true,
                data: stats,
            };
        });
    }
    cleanup(days) {
        return __awaiter(this, void 0, void 0, function* () {
            const olderThanDays = days ? parseInt(days) : 30;
            if (isNaN(olderThanDays) || olderThanDays < 1) {
                throw new common_1.BadRequestException('–ü–∞—Ä–∞–º–µ—Ç—Ä days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
            }
            const deletedCount = yield this.webPushService.cleanupInactiveSubscriptions(olderThanDays);
            return {
                success: true,
                message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—à–µ ${olderThanDays} –¥–Ω–µ–π`,
                deletedCount,
            };
        });
    }
    validateSubscription(subscription) {
        var _a, _b;
        if (!subscription.endpoint) {
            throw new Error('Endpoint –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }
        if (!((_a = subscription.keys) === null || _a === void 0 ? void 0 : _a.p256dh) || !((_b = subscription.keys) === null || _b === void 0 ? void 0 : _b.auth)) {
            throw new Error('–ö–ª—é—á–∏ p256dh –∏ auth –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }
        try {
            new URL(subscription.endpoint);
        }
        catch (_c) {
            throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π endpoint URL');
        }
    }
    validateNotificationPayload(dto) {
        var _a, _b;
        if (!((_a = dto.title) === null || _a === void 0 ? void 0 : _a.trim())) {
            throw new Error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }
        if (!((_b = dto.body) === null || _b === void 0 ? void 0 : _b.trim())) {
            throw new Error('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }
        if (dto.title.length > 100) {
            throw new Error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        if (dto.body.length > 500) {
            throw new Error('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤');
        }
    }
};
exports.PushController = PushController;
__decorate([
    (0, common_1.Get)('vapid-public-key'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], PushController.prototype, "getVapidPublicKey", null);
__decorate([
    (0, common_1.Post)('subscribe'),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Headers)('user-agent')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "subscribe", null);
__decorate([
    (0, common_1.Delete)('unsubscribe'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "unsubscribe", null);
__decorate([
    (0, common_1.Get)('subscriptions/:userId'),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "getUserSubscriptions", null);
__decorate([
    (0, common_1.Post)('send'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "sendNotification", null);
__decorate([
    (0, common_1.Post)('test/:userId'),
    __param(0, (0, common_1.Param)('userId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "sendTestNotification", null);
__decorate([
    (0, common_1.Get)('stats'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], PushController.prototype, "getStats", null);
__decorate([
    (0, common_1.Delete)('cleanup'),
    __param(0, (0, common_1.Query)('days')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PushController.prototype, "cleanup", null);
exports.PushController = PushController = PushController_1 = __decorate([
    (0, common_1.Controller)('push'),
    __metadata("design:paramtypes", [web_push_service_1.WebPushService])
], PushController);
//# sourceMappingURL=push.controller.js.map