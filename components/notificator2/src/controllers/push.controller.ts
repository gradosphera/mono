import {
  Controller,
  Post,
  Delete,
  Get,
  Body,
  Param,
  Headers,
  BadRequestException,
  Logger,
  Query,
} from '@nestjs/common';
import { WebPushService, PushSubscriptionData, NotificationPayload } from '../services/web-push.service';

export interface SubscribePushDto {
  userId: string;
  subscription: PushSubscriptionData;
}

export interface SendNotificationDto {
  userId?: string;
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  image?: string;
  data?: any;
  actions?: Array<{
    action: string;
    title: string;
    icon?: string;
  }>;
  tag?: string;
  requireInteraction?: boolean;
  silent?: boolean;
  vibrate?: number[];
}

@Controller('push')
export class PushController {
  private readonly logger = new Logger(PushController.name);

  constructor(private readonly webPushService: WebPushService) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π VAPID –∫–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  @Get('vapid-public-key')
  getVapidPublicKey() {
    const publicKey = this.webPushService.getVapidPublicKey();
    
    if (!publicKey) {
      throw new BadRequestException('VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞.');
    }

    return {
      publicKey,
      applicationServerKey: publicKey, // Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    };
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  @Post('subscribe')
  async subscribe(
    @Body() dto: SubscribePushDto,
    @Headers('user-agent') userAgent?: string,
  ) {
    try {
      this.validateSubscription(dto.subscription);

      const subscription = await this.webPushService.saveSubscription(
        dto.userId,
        dto.subscription,
        userAgent,
      );

      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dto.userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);

      return {
        success: true,
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
        subscriptionId: subscription.id,
      };
    } catch (error: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  @Delete('unsubscribe')
  async unsubscribe(@Body() body: { endpoint: string }) {
    try {
      if (!body.endpoint) {
        throw new BadRequestException('Endpoint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏');
      }

      await this.webPushService.removeSubscription(body.endpoint);

      this.logger.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: ${body.endpoint.substring(0, 50)}...`);

      return {
        success: true,
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞',
      };
    } catch (error: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  @Get('subscriptions/:userId')
  async getUserSubscriptions(@Param('userId') userId: string) {
    const subscriptions = await this.webPushService.getUserSubscriptions(userId);
    
    return {
      success: true,
      data: subscriptions.map(sub => ({
        id: sub.id,
        endpoint: sub.endpoint.substring(0, 50) + '...', // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π endpoint –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        userAgent: sub.userAgent,
        createdAt: sub.createdAt,
        isActive: sub.isActive,
      })),
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  @Post('send')
  async sendNotification(@Body() dto: SendNotificationDto) {
    try {
      this.validateNotificationPayload(dto);

      const payload: NotificationPayload = {
        title: dto.title,
        body: dto.body,
        icon: dto.icon,
        badge: dto.badge,
        image: dto.image,
        data: dto.data,
        actions: dto.actions,
        tag: dto.tag,
        requireInteraction: dto.requireInteraction,
        silent: dto.silent,
        timestamp: Date.now(),
        vibrate: dto.vibrate,
      };

      if (dto.userId) {
        await this.webPushService.sendNotificationToUser(dto.userId, payload);
        this.logger.log(`Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.userId}`);
      } else {
        await this.webPushService.sendNotificationToAll(payload);
        this.logger.log('Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
      }

      return {
        success: true,
        message: dto.userId 
          ? `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.userId}`
          : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
      };
    } catch (error: any) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      throw new BadRequestException(error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  @Post('test/:userId')
  async sendTestNotification(@Param('userId') userId: string) {
    const payload: NotificationPayload = {
      title: 'üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      body: '–í–∞—à–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      icon: '/icons/notification-icon.png',
      badge: '/icons/badge-icon.png',
      tag: 'test-notification',
      data: {
        type: 'test',
        timestamp: Date.now(),
      },
      actions: [
        {
          action: 'view',
          title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        },
        {
          action: 'dismiss',
          title: '–ó–∞–∫—Ä—ã—Ç—å',
        },
      ],
    };

    await this.webPushService.sendNotificationToUser(userId, payload);

    return {
      success: true,
      message: `–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`,
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É push –ø–æ–¥–ø–∏—Å–æ–∫
   */
  @Get('stats')
  async getStats() {
    const stats = await this.webPushService.getSubscriptionStats();
    
    return {
      success: true,
      data: stats,
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  @Delete('cleanup')
  async cleanup(@Query('days') days?: string) {
    const olderThanDays = days ? parseInt(days) : 30;
    
    if (isNaN(olderThanDays) || olderThanDays < 1) {
      throw new BadRequestException('–ü–∞—Ä–∞–º–µ—Ç—Ä days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }

    const deletedCount = await this.webPushService.cleanupInactiveSubscriptions(olderThanDays);

    return {
      success: true,
      message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—à–µ ${olderThanDays} –¥–Ω–µ–π`,
      deletedCount,
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
   */
  private validateSubscription(subscription: PushSubscriptionData) {
    if (!subscription.endpoint) {
      throw new Error('Endpoint –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!subscription.keys?.p256dh || !subscription.keys?.auth) {
      throw new Error('–ö–ª—é—á–∏ p256dh –∏ auth –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ endpoint –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π URL
    try {
      new URL(subscription.endpoint);
    } catch {
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π endpoint URL');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private validateNotificationPayload(dto: SendNotificationDto) {
    if (!dto.title?.trim()) {
      throw new Error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (!dto.body?.trim()) {
      throw new Error('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    if (dto.title.length > 100) {
      throw new Error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (dto.body.length > 500) {
      throw new Error('–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤');
    }
  }
} 