import type { JSONSchemaType } from 'ajv'
import type { Cooperative, Interfaces } from 'cooptypes'

// Схема для IMeetExtended
export const MeetSchema: JSONSchemaType<Cooperative.Model.IMeetExtended> = {
  type: 'object',
  properties: {
    id: { type: 'string' },
    hash: { type: 'string' },
    coopname: { type: 'string' },
    type: { type: 'string' },
    level: { type: 'string' },
    status: { type: 'string' },
    open_at: { type: 'string' },
    close_at: { type: 'string' },
    open_at_datetime: { type: 'string' },
    close_at_datetime: { type: 'string' },
    presider_full_name: { type: 'string' },
    secretary_full_name: { type: 'string' },
    initiator: { type: 'string' },
    presider: { type: 'string' },
    secretary: { type: 'string' },
    quorum_percent: { type: 'number' },
    signed_ballots: { type: 'string' },
    current_quorum_percent: { type: 'number' },
    cycle: { type: 'string' },
    notified_users: {
      type: 'array',
      items: { type: 'string' },
    },
    quorum_passed: { type: 'boolean' },
    created_at: { type: 'string' },
    proposal: {
      type: 'object',
      properties: {
        version: { type: 'string' },
        hash: { type: 'string' },
        doc_hash: { type: 'string' },
        meta_hash: { type: 'string' },
        meta: { type: 'string' },
        signatures: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'number' },
              signed_hash: { type: 'string' },
              signer: { type: 'string' },
              public_key: { type: 'string' },
              signature: { type: 'string' },
              signed_at: { type: 'string' },
              meta: { type: 'string' },
            },
            required: ['id', 'signed_hash', 'signer', 'public_key', 'signature', 'signed_at', 'meta'],
            additionalProperties: true,
          },
        },
      },
      required: ['version', 'hash', 'doc_hash', 'meta_hash', 'meta', 'signatures'],
      additionalProperties: true,
    },
    authorization: {
      type: 'object',
      properties: {
        version: { type: 'string' },
        hash: { type: 'string' },
        doc_hash: { type: 'string' },
        meta_hash: { type: 'string' },
        meta: { type: 'string' },
        signatures: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'number' },
              signed_hash: { type: 'string' },
              signer: { type: 'string' },
              public_key: { type: 'string' },
              signature: { type: 'string' },
              signed_at: { type: 'string' },
              meta: { type: 'string' },
            },
            required: ['id', 'signed_hash', 'signer', 'public_key', 'signature', 'signed_at', 'meta'],
            additionalProperties: true,
          },
        },
      },
      required: ['version', 'hash', 'doc_hash', 'meta_hash', 'meta', 'signatures'],
      additionalProperties: true,
    },
    decision1: {
      type: 'object',
      properties: {
        version: { type: 'string' },
        hash: { type: 'string' },
        doc_hash: { type: 'string' },
        meta_hash: { type: 'string' },
        meta: { type: 'string' },
        signatures: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'number' },
              signed_hash: { type: 'string' },
              signer: { type: 'string' },
              public_key: { type: 'string' },
              signature: { type: 'string' },
              signed_at: { type: 'string' },
              meta: { type: 'string' },
            },
            required: ['id', 'signed_hash', 'signer', 'public_key', 'signature', 'signed_at', 'meta'],
            additionalProperties: true,
          },
        },
      },
      required: ['version', 'hash', 'doc_hash', 'meta_hash', 'meta', 'signatures'],
      additionalProperties: true,
    },
    decision2: {
      type: 'object',
      properties: {
        version: { type: 'string' },
        hash: { type: 'string' },
        doc_hash: { type: 'string' },
        meta_hash: { type: 'string' },
        meta: { type: 'string' },
        signatures: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'number' },
              signed_hash: { type: 'string' },
              signer: { type: 'string' },
              public_key: { type: 'string' },
              signature: { type: 'string' },
              signed_at: { type: 'string' },
              meta: { type: 'string' },
            },
            required: ['id', 'signed_hash', 'signer', 'public_key', 'signature', 'signed_at', 'meta'],
            additionalProperties: true,
          },
        },
      },
      required: ['version', 'hash', 'doc_hash', 'meta_hash', 'meta', 'signatures'],
      additionalProperties: true,
    },
  },
  required: [
    'id',
    'hash',
    'coopname',
    'type',
    'status',
    'open_at_datetime',
    'close_at_datetime',
    'presider_full_name',
    'secretary_full_name',
  ],
  additionalProperties: true,
}

// Схема для базового IMeetPoint
export const MeetPointSchema: JSONSchemaType<Interfaces.Meet.IMeetPoint> = {
  type: 'object',
  properties: {
    context: { type: 'string' },
    title: { type: 'string' },
    decision: { type: 'string' },
  },
  required: ['context', 'title', 'decision'],
  additionalProperties: true,
}

// Схема для расширенного IQuestion (используется в 304 документе)
export const QuestionSchema: JSONSchemaType<Interfaces.Meet.IQuestion> = {
  type: 'object',
  properties: {
    id: { type: 'string' },
    number: { type: 'string' },
    coopname: { type: 'string' },
    meet_id: { type: 'string' },
    title: { type: 'string' },
    context: { type: 'string' },
    decision: { type: 'string' },
    counter_votes_for: { type: 'string' },
    counter_votes_against: { type: 'string' },
    counter_votes_abstained: { type: 'string' },
    voters_for: { type: 'array', items: { type: 'string' } },
    voters_against: { type: 'array', items: { type: 'string' } },
    voters_abstained: { type: 'array', items: { type: 'string' } },
  },
  required: [
    'id',
    'number',
    'coopname',
    'meet_id',
    'title',
    'context',
    'decision',
    'counter_votes_for',
    'counter_votes_against',
    'counter_votes_abstained',
    'voters_for',
    'voters_against',
    'voters_abstained',
  ],
  additionalProperties: true,
}

// Схема для расширенного IQuestionExtended (используется в 304 документе)
export const QuestionExtendedSchema: JSONSchemaType<Cooperative.Model.IQuestionExtended> = {
  type: 'object',
  properties: {
    id: { type: 'string' },
    number: { type: 'string' },
    coopname: { type: 'string' },
    meet_id: { type: 'string' },
    title: { type: 'string' },
    context: { type: 'string' },
    decision: { type: 'string' },
    counter_votes_for: { type: 'string' },
    counter_votes_against: { type: 'string' },
    counter_votes_abstained: { type: 'string' },
    voters_for: { type: 'array', items: { type: 'string' } },
    voters_against: { type: 'array', items: { type: 'string' } },
    voters_abstained: { type: 'array', items: { type: 'string' } },
    votes_total: { type: 'integer', nullable: true },
    votes_for_percent: { type: 'integer', nullable: true },
    votes_against_percent: { type: 'integer', nullable: true },
    votes_abstained_percent: { type: 'integer', nullable: true },
    is_accepted: { type: 'boolean', nullable: true },
  },
  required: [
    'id',
    'number',
    'coopname',
    'meet_id',
    'title',
    'context',
    'decision',
    'counter_votes_for',
    'counter_votes_against',
    'counter_votes_abstained',
    'voters_for',
    'voters_against',
    'voters_abstained',
  ],
  additionalProperties: true,
}
