import * as fs from 'node:fs'
import * as path from 'node:path'
import { fileURLToPath } from 'node:url'

function extractMutationDescriptions(schemaPath: string): Record<string, string> {
  const schema = fs.readFileSync(schemaPath, 'utf-8')

  // 1. –í—ã–¥—ë—Ä–≥–∏–≤–∞–µ–º –±–ª–æ–∫–∏ type Query {...} –∏ type Mutation {...}
  //    –§–ª–∞–≥ [\s\S]*? ‚Äî –∂–∞–¥–Ω—ã–π –¥–ª—è –ª—é–±—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã
  //    "?" ‚Äî —á—Ç–æ–±—ã –º–∞—Ç—á–∏—Ç—å –≤ "–ª–µ–Ω–∏–≤–æ–º" —Ä–µ–∂–∏–º–µ, –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—è –¥–∞–ª—å—à–µ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä–Ω–æ–π —Å–∫–æ–±–∫–∏
  //
  // –ü—Ä–∏–º–µ—Ä:
  //   type Query {
  //     """–î–æ–∫ –¥–ª—è getAccount"""
  //     getAccount(...): ...
  //   }
  // eslint-disable-next-line regexp/no-super-linear-backtracking
  const typeBlockRegex = /type\s+(Query|Mutation)\s*\{\s*([\s\S]*?)\}/g

  let match
  const blocks: { [key: string]: string } = {
    Query: '',
    Mutation: '',
  }

  // eslint-disable-next-line no-cond-assign
  while ((match = typeBlockRegex.exec(schema)) !== null) {
    const typeName = match[1] // Query –∏–ª–∏ Mutation
    const blockContent = match[2] // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–±–æ–∫ { ... }

    blocks[typeName] = blockContent
  }

  // 2. –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å **–≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏** —Ç–∏–ø–∞
  //    –ò—â–µ–º –ø–∞—Ä—ã:
  //    """
  //      –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
  //      –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  //    """
  //    getAccount(...): ...
  //
  // –∏–ª–∏
  //
  //    """
  //      –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
  //    """
  //    getAccount(...): ...
  function parseBlock(content: string): Record<string, string> {
    const results: Record<string, string> = {}
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ä—è–¥:
    // """  (—á—Ç–æ —É–≥–æ–¥–Ω–æ, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã)  """  (–ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã)  (methodName)   (   –∏–ª–∏   :
    //
    // –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:
    // [\s\S]*?    -> –ª–µ–Ω–∏–≤—ã–π, —á—Ç–æ–±—ã –Ω–µ "—Å—ä–µ—Å—Ç—å" –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ """
    // (\w+)       -> –∏–º—è –∑–∞–ø—Ä–æ—Å–∞/–º—É—Ç–∞—Ü–∏–∏
    // (?:\(|:)    -> –ª–∏–±–æ '(' (–≤—ã–∑–æ–≤), –ª–∏–±–æ ':' (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∏–ø)
    const itemRegex = /"""([\s\S]*?)"""\s*(\w+)\s*(?:\(|:)/g

    let m
    // eslint-disable-next-line no-cond-assign
    while ((m = itemRegex.exec(content)) !== null) {
      let doc = m[1]
      const name = m[2]
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ doc
      doc = doc
        .replace(/\r/g, '')
        .replace(/\n+/g, ' ')
        .replace(/\s+/g, ' ')
        .trim()

      results[name] = doc
    }
    return results
  }

  // 3. –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
  let descriptions: Record<string, string> = {}

  // –ü–∞—Ä—Å–∏–º –±–ª–æ–∫ Query
  const queryMap = parseBlock(blocks.Query)
  // –ü–∞—Ä—Å–∏–º –±–ª–æ–∫ Mutation
  const mutationMap = parseBlock(blocks.Mutation)

  // –°–∫–ª–µ–∏–≤–∞–µ–º (–µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–æ–≤–ø–∞–¥—É—Ç, Mutation –ø–µ—Ä–µ–∫—Ä–æ–µ—Ç)
  descriptions = {
    ...queryMap,
    ...mutationMap,
  }

  console.log('üìú –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π –º—É—Ç–∞—Ü–∏–π:', Object.keys(descriptions).length)
  return descriptions
}

// üìå 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ index.ts
function processIndexFile(filePath: string, descriptions: Record<string, string>) {
  const content = fs.readFileSync(filePath, 'utf-8')
  const lines = content.split('\n')

  // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –û–î–ù–û–ì–û —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ (–±–µ–∑ —è–∫–æ—Ä—è ^ –∏ —Å ;? –Ω–∞ –∫–æ–Ω—Ü–µ):
  // "export * as SomeName from './someName';" (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–æ—Ç—Å—Ç—É–ø–∞–º–∏, –≤–æ–∑–º–æ–∂–Ω–∞—è ;)
  const exportRegex = /export\s+\*\s+as\s+(\w+)\s+from\s+["']\.\/([\w-]+)["'];?/

  const newLines: string[] = []
  let modified = false

  // –§—É–Ω–∫—Ü–∏—è-–ø—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∞—Å—Ç—å—é JSDoc/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  function isDocComment(line: string) {
    const t = line.trim()
    return (
      t.startsWith('/**')
      || t.startsWith('/*')
      || t.startsWith('*')
      || t.startsWith('*/')
      || t.startsWith('//')
    )
  }

  for (let i = 0; i < lines.length; i++) {
    const originalLine = lines[i]
    const trimmedLine = originalLine.trim()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç-–ø–∞—Ç—Ç–µ—Ä–Ω—É
    const match = trimmedLine.match(exportRegex)

    // –ï—Å–ª–∏ –ù–ï —ç–∫—Å–ø–æ—Ä—Ç, –∫–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
    if (!match) {
      newLines.push(originalLine)
      continue
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    const [, exportName, fileName] = match
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    const exportNameKey = exportName.charAt(0).toLowerCase() + exportName.slice(1)
    const description = descriptions[exportNameKey]

    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç: ${exportName} -> ${fileName}`)

    // 1) –£–¥–∞–ª—è–µ–º –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —à–ª–∏ –ø—Ä—è–º–æ –Ω–∞–¥ —ç—Ç–∏–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    while (newLines.length > 0 && isDocComment(newLines[newLines.length - 1])) {
      newLines.pop()
      modified = true
    }

    // 2) –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (description) {
      console.log(`    ‚ûï –î–æ–±–∞–≤–ª—è–µ–º (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${description}"`)
      newLines.push(`/** ${description} */`)
      modified = true
    }
    else {
      console.warn(`    ‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ schema.gql –¥–ª—è "${exportName}" (–∫–ª—é—á "${exportNameKey}")`)
    }

    // 3) –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —ç–∫—Å–ø–æ—Ä—Ç
    newLines.push(originalLine)
  }

  // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
  if (modified) {
    fs.writeFileSync(filePath, newLines.join('\n'), 'utf-8')
  }
  else {
    // –ª–æ–≥–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  }
}

// üìå 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø–æ–¥–ø–∞–ø–æ–∫ `mutations` –∏ `queries`, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö index.ts
function processSubdirectories(sdkDirectory: string, schemaPath: string) {
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ `index.ts` —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö...')
  const descriptions = extractMutationDescriptions(schemaPath)
  const subDirs = ['mutations', 'queries']

  subDirs.forEach((subDir) => {
    const baseDir = path.join(sdkDirectory, subDir)
    if (fs.existsSync(baseDir) && fs.statSync(baseDir).isDirectory()) {
      console.log(`üìÇ –ü–æ–∏—Å–∫ –≤: ${baseDir}`)

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
      const subfolders = fs
        .readdirSync(baseDir)
        .filter(folder => fs.statSync(path.join(baseDir, folder)).isDirectory())

      subfolders.forEach((folder) => {
        const indexPath = path.join(baseDir, folder, 'index.ts')
        if (fs.existsSync(indexPath)) {
          processIndexFile(indexPath, descriptions)
        }
        else {
          console.warn(`‚ö†Ô∏è –§–∞–π–ª index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: ${path.join(baseDir, folder)}`)
        }
      })
    }
    else {
      console.warn(`‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${baseDir}`)
    }
  })
}

// üìå 4. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ (—ç–º—É–ª—è—Ü–∏—è __dirname –≤ ES-–º–æ–¥—É–ª—è—Ö)
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const schemaPath = path.resolve(__dirname, '../../controller/schema.gql')
const sdkDirectory = path.resolve(__dirname, '../src')

processSubdirectories(sdkDirectory, schemaPath)
