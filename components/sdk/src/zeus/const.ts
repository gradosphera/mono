/* eslint-disable */

export const AllTypesProps: Record<string,any> = {
	AcceptChildOrderInput:{
		document:"AssetContributionStatementSignedDocumentInput"
	},
	AccountType: "enum" as const,
	AddParticipantInput:{
		entrepreneur_data:"CreateEntrepreneurDataInput",
		individual_data:"CreateIndividualDataInput",
		organization_data:"CreateOrganizationDataInput",
		type:"AccountType"
	},
	AddTrustedAccountInput:{

	},
	AgendaGeneralMeetPointInput:{

	},
	AgendaGeneralMeetQuestion:{

	},
	AgendaMeet:{

	},
	AgreementInput:{

	},
	AnnualGeneralMeetingAgendaGenerateDocumentInput:{
		meet:"AgendaMeet",
		questions:"AgendaGeneralMeetQuestion"
	},
	AnnualGeneralMeetingAgendaSignedDocumentInput:{
		meta:"AnnualGeneralMeetingAgendaSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AnnualGeneralMeetingAgendaSignedMetaDocumentInput:{
		meet:"AgendaMeet",
		questions:"AgendaGeneralMeetQuestion"
	},
	AnnualGeneralMeetingDecisionGenerateDocumentInput:{

	},
	AnnualGeneralMeetingDecisionSignedDocumentInput:{
		meta:"AnnualGeneralMeetingDecisionSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AnnualGeneralMeetingDecisionSignedMetaDocumentInput:{

	},
	AnnualGeneralMeetingNotificationGenerateDocumentInput:{

	},
	AnnualGeneralMeetingNotificationSignedDocumentInput:{
		meta:"AnnualGeneralMeetingNotificationSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AnnualGeneralMeetingNotificationSignedMetaDocumentInput:{

	},
	AnnualGeneralMeetingSovietDecisionGenerateDocumentInput:{

	},
	AnnualGeneralMeetingVotingBallotGenerateDocumentInput:{
		answers:"AnswerInput"
	},
	AnnualGeneralMeetingVotingBallotSignedDocumentInput:{
		meta:"AnnualGeneralMeetingVotingBallotSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AnnualGeneralMeetingVotingBallotSignedMetaDocumentInput:{
		answers:"AnswerInput"
	},
	AnswerInput:{

	},
	AssetContributionActGenerateDocumentInput:{

	},
	AssetContributionActSignedDocumentInput:{
		meta:"AssetContributionActSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AssetContributionActSignedMetaDocumentInput:{

	},
	AssetContributionDecisionGenerateDocumentInput:{

	},
	AssetContributionStatementGenerateDocumentInput:{
		request:"CommonRequestInput"
	},
	AssetContributionStatementSignedDocumentInput:{
		meta:"AssetContributionStatementSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	AssetContributionStatementSignedMetaDocumentInput:{
		request:"CommonRequestInput"
	},
	BankAccountDetailsInput:{

	},
	BankAccountInput:{
		details:"BankAccountDetailsInput"
	},
	CancelRequestInput:{

	},
	CommonRequestInput:{

	},
	CompleteRequestInput:{

	},
	ConfirmReceiveOnRequestInput:{
		document:"ReturnByAssetActSignedDocumentInput"
	},
	ConfirmSupplyOnRequestInput:{
		document:"AssetContributionActSignedDocumentInput"
	},
	Country: "enum" as const,
	CreateAnnualGeneralMeetInput:{
		agenda:"AgendaGeneralMeetPointInput",
		close_at:"DateTime",
		open_at:"DateTime",
		proposal:"AnnualGeneralMeetingAgendaSignedDocumentInput"
	},
	CreateBankAccountInput:{
		data:"BankAccountInput"
	},
	CreateBranchInput:{

	},
	CreateChildOrderInput:{
		document:"ReturnByAssetStatementSignedDocumentInput"
	},
	CreateDepositPaymentInput:{

	},
	CreateEntrepreneurDataInput:{
		bank_account:"BankAccountInput",
		country:"Country",
		details:"EntrepreneurDetailsInput"
	},
	CreateIndividualDataInput:{
		passport:"PassportInput"
	},
	CreateInitialPaymentInput:{

	},
	CreateOrganizationDataInput:{
		bank_account:"BankAccountInput",
		details:"OrganizationDetailsInput",
		represented_by:"RepresentedByInput",
		type:"OrganizationType"
	},
	CreateParentOfferInput:{

	},
	CreateProjectFreeDecisionInput:{

	},
	CreateSubscriptionInput:{
		subscription:"WebPushSubscriptionDataInput"
	},
	CreateWithdrawInput:{
		statement:"ReturnByMoneySignedDocumentInput"
	},
	DateTime: `scalar.DateTime` as const,
	DeactivateSubscriptionInput:{

	},
	DeclineRequestInput:{

	},
	DeleteBranchInput:{

	},
	DeletePaymentMethodInput:{

	},
	DeleteTrustedAccountInput:{

	},
	DeliverOnRequestInput:{

	},
	DisputeOnRequestInput:{
		document:"JSONObject"
	},
	EditBranchInput:{

	},
	EntrepreneurDetailsInput:{

	},
	ExtendedMeetStatus: "enum" as const,
	ExtensionInput:{
		config:"JSON",
		created_at:"DateTime",
		updated_at:"DateTime"
	},
	FreeDecisionGenerateDocumentInput:{

	},
	GenerateDocumentInput:{

	},
	GenerateDocumentOptionsInput:{

	},
	GetAccountInput:{

	},
	GetAccountsInput:{

	},
	GetBranchesInput:{

	},
	GetDocumentsInput:{
		filter:"JSON"
	},
	GetExtensionsInput:{

	},
	GetLedgerHistoryInput:{

	},
	GetLedgerInput:{

	},
	GetMeetInput:{

	},
	GetMeetsInput:{

	},
	GetPaymentMethodsInput:{

	},
	GetUserSubscriptionsInput:{

	},
	Init:{
		organization_data:"CreateOrganizationDataInput",
		vars:"VarsInput"
	},
	Install:{
		soviet:"SovietMemberInput"
	},
	JSON: `scalar.JSON` as const,
	JSONObject: `scalar.JSONObject` as const,
	LoginInput:{

	},
	LogoutInput:{

	},
	MetaDocumentInput:{

	},
	ModerateRequestInput:{

	},
	Mutation:{
		acceptChildOrder:{
			data:"AcceptChildOrderInput"
		},
		addParticipant:{
			data:"AddParticipantInput"
		},
		addTrustedAccount:{
			data:"AddTrustedAccountInput"
		},
		cancelRequest:{
			data:"CancelRequestInput"
		},
		completeRequest:{
			data:"CompleteRequestInput"
		},
		confirmReceiveOnRequest:{
			data:"ConfirmReceiveOnRequestInput"
		},
		confirmSupplyOnRequest:{
			data:"ConfirmSupplyOnRequestInput"
		},
		createAnnualGeneralMeet:{
			data:"CreateAnnualGeneralMeetInput"
		},
		createBankAccount:{
			data:"CreateBankAccountInput"
		},
		createBranch:{
			data:"CreateBranchInput"
		},
		createChildOrder:{
			data:"CreateChildOrderInput"
		},
		createDepositPayment:{
			data:"CreateDepositPaymentInput"
		},
		createInitialPayment:{
			data:"CreateInitialPaymentInput"
		},
		createParentOffer:{
			data:"CreateParentOfferInput"
		},
		createProjectOfFreeDecision:{
			data:"CreateProjectFreeDecisionInput"
		},
		createWebPushSubscription:{
			data:"CreateSubscriptionInput"
		},
		createWithdraw:{
			input:"CreateWithdrawInput"
		},
		deactivateWebPushSubscriptionById:{
			data:"DeactivateSubscriptionInput"
		},
		declineRequest:{
			data:"DeclineRequestInput"
		},
		deleteBranch:{
			data:"DeleteBranchInput"
		},
		deletePaymentMethod:{
			data:"DeletePaymentMethodInput"
		},
		deleteTrustedAccount:{
			data:"DeleteTrustedAccountInput"
		},
		deliverOnRequest:{
			data:"DeliverOnRequestInput"
		},
		disputeOnRequest:{
			data:"DisputeOnRequestInput"
		},
		editBranch:{
			data:"EditBranchInput"
		},
		generateAnnualGeneralMeetAgendaDocument:{
			data:"AnnualGeneralMeetingAgendaGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateAnnualGeneralMeetDecisionDocument:{
			data:"AnnualGeneralMeetingDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateAnnualGeneralMeetNotificationDocument:{
			data:"AnnualGeneralMeetingNotificationGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateAssetContributionAct:{
			data:"AssetContributionActGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateAssetContributionDecision:{
			data:"AssetContributionDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateAssetContributionStatement:{
			data:"AssetContributionStatementGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateBallotForAnnualGeneralMeetDocument:{
			data:"AnnualGeneralMeetingVotingBallotGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateFreeDecision:{
			data:"FreeDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateParticipantApplication:{
			data:"ParticipantApplicationGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateParticipantApplicationDecision:{
			data:"ParticipantApplicationDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generatePrivacyAgreement:{
			data:"GenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateProjectOfFreeDecision:{
			data:"ProjectFreeDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateReturnByAssetAct:{
			data:"ReturnByAssetActGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateReturnByAssetDecision:{
			data:"ReturnByAssetDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateReturnByAssetStatement:{
			data:"ReturnByAssetStatementGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateReturnByMoneyDecisionDocument:{
			data:"ReturnByMoneyDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateReturnByMoneyStatementDocument:{
			data:"ReturnByMoneyGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateSelectBranchDocument:{
			data:"SelectBranchGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateSignatureAgreement:{
			data:"GenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateSovietDecisionOnAnnualMeetDocument:{
			data:"AnnualGeneralMeetingSovietDecisionGenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateUserAgreement:{
			data:"GenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		generateWalletAgreement:{
			data:"GenerateDocumentInput",
			options:"GenerateDocumentOptionsInput"
		},
		initSystem:{
			data:"Init"
		},
		installExtension:{
			data:"ExtensionInput"
		},
		installSystem:{
			data:"Install"
		},
		login:{
			data:"LoginInput"
		},
		logout:{
			data:"LogoutInput"
		},
		moderateRequest:{
			data:"ModerateRequestInput"
		},
		notifyOnAnnualGeneralMeet:{
			data:"NotifyOnAnnualGeneralMeetInput"
		},
		prohibitRequest:{
			data:"ProhibitRequestInput"
		},
		publishProjectOfFreeDecision:{
			data:"PublishProjectFreeDecisionInput"
		},
		publishRequest:{
			data:"PublishRequestInput"
		},
		receiveOnRequest:{
			data:"ReceiveOnRequestInput"
		},
		refresh:{
			data:"RefreshInput"
		},
		registerAccount:{
			data:"RegisterAccountInput"
		},
		registerParticipant:{
			data:"RegisterParticipantInput"
		},
		resetKey:{
			data:"ResetKeyInput"
		},
		restartAnnualGeneralMeet:{
			data:"RestartAnnualGeneralMeetInput"
		},
		selectBranch:{
			data:"SelectBranchInput"
		},
		setPaymentStatus:{
			data:"SetPaymentStatusInput"
		},
		setWif:{
			data:"SetWifInput"
		},
		signByPresiderOnAnnualGeneralMeet:{
			data:"SignByPresiderOnAnnualGeneralMeetInput"
		},
		signBySecretaryOnAnnualGeneralMeet:{
			data:"SignBySecretaryOnAnnualGeneralMeetInput"
		},
		startResetKey:{
			data:"StartResetKeyInput"
		},
		supplyOnRequest:{
			data:"SupplyOnRequestInput"
		},
		uninstallExtension:{
			data:"UninstallExtensionInput"
		},
		unpublishRequest:{
			data:"UnpublishRequestInput"
		},
		updateAccount:{
			data:"UpdateAccountInput"
		},
		updateBankAccount:{
			data:"UpdateBankAccountInput"
		},
		updateExtension:{
			data:"ExtensionInput"
		},
		updateRequest:{
			data:"UpdateRequestInput"
		},
		updateSystem:{
			data:"Update"
		},
		voteOnAnnualGeneralMeet:{
			data:"VoteOnAnnualGeneralMeetInput"
		}
	},
	NotifyOnAnnualGeneralMeetInput:{
		notification:"AnnualGeneralMeetingNotificationSignedDocumentInput"
	},
	OrganizationDetailsInput:{

	},
	OrganizationType: "enum" as const,
	PaginationInput:{

	},
	ParticipantApplicationDecisionGenerateDocumentInput:{

	},
	ParticipantApplicationGenerateDocumentInput:{

	},
	ParticipantApplicationSignedDocumentInput:{
		meta:"ParticipantApplicationSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	ParticipantApplicationSignedMetaDocumentInput:{

	},
	PassportInput:{

	},
	PaymentDirection: "enum" as const,
	PaymentFiltersInput:{
		direction:"PaymentDirection",
		status:"PaymentStatus",
		type:"PaymentType"
	},
	PaymentStatus: "enum" as const,
	PaymentType: "enum" as const,
	ProhibitRequestInput:{

	},
	ProjectFreeDecisionGenerateDocumentInput:{

	},
	ProjectFreeDecisionSignedDocumentInput:{
		meta:"ProjectFreeDecisionSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	ProjectFreeDecisionSignedMetaDocumentInput:{

	},
	PublishProjectFreeDecisionInput:{
		document:"ProjectFreeDecisionSignedDocumentInput"
	},
	PublishRequestInput:{

	},
	Query:{
		getAccount:{
			data:"GetAccountInput"
		},
		getAccounts:{
			data:"GetAccountsInput",
			options:"PaginationInput"
		},
		getBranches:{
			data:"GetBranchesInput"
		},
		getDocuments:{
			data:"GetDocumentsInput"
		},
		getExtensions:{
			data:"GetExtensionsInput"
		},
		getLedger:{
			data:"GetLedgerInput"
		},
		getLedgerHistory:{
			data:"GetLedgerHistoryInput"
		},
		getMeet:{
			data:"GetMeetInput"
		},
		getMeets:{
			data:"GetMeetsInput"
		},
		getPaymentMethods:{
			data:"GetPaymentMethodsInput"
		},
		getPayments:{
			data:"PaymentFiltersInput",
			options:"PaginationInput"
		},
		getUserWebPushSubscriptions:{
			data:"GetUserSubscriptionsInput"
		},
		searchPrivateAccounts:{
			data:"SearchPrivateAccountsInput"
		}
	},
	ReceiveOnRequestInput:{
		document:"ReturnByAssetActSignedDocumentInput"
	},
	RefreshInput:{

	},
	RegisterAccountInput:{
		entrepreneur_data:"CreateEntrepreneurDataInput",
		individual_data:"CreateIndividualDataInput",
		organization_data:"CreateOrganizationDataInput",
		type:"AccountType"
	},
	RegisterParticipantInput:{
		privacy_agreement:"SignedDigitalDocumentInput",
		signature_agreement:"SignedDigitalDocumentInput",
		statement:"ParticipantApplicationSignedDocumentInput",
		user_agreement:"SignedDigitalDocumentInput",
		wallet_agreement:"SignedDigitalDocumentInput"
	},
	RepresentedByInput:{

	},
	ResetKeyInput:{

	},
	RestartAnnualGeneralMeetInput:{
		new_close_at:"DateTime",
		new_open_at:"DateTime",
		newproposal:"AnnualGeneralMeetingAgendaSignedDocumentInput"
	},
	ReturnByAssetActGenerateDocumentInput:{

	},
	ReturnByAssetActSignedDocumentInput:{
		meta:"ReturnByAssetActSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	ReturnByAssetActSignedMetaDocumentInput:{

	},
	ReturnByAssetDecisionGenerateDocumentInput:{

	},
	ReturnByAssetStatementGenerateDocumentInput:{
		request:"CommonRequestInput"
	},
	ReturnByAssetStatementSignedDocumentInput:{
		meta:"ReturnByAssetStatementSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	ReturnByAssetStatementSignedMetaDocumentInput:{
		request:"CommonRequestInput"
	},
	ReturnByMoneyDecisionGenerateDocumentInput:{

	},
	ReturnByMoneyGenerateDocumentInput:{

	},
	ReturnByMoneySignedDocumentInput:{
		meta:"ReturnByMoneySignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	ReturnByMoneySignedMetaDocumentInput:{

	},
	SearchPrivateAccountsInput:{

	},
	SelectBranchGenerateDocumentInput:{

	},
	SelectBranchInput:{
		document:"SelectBranchSignedDocumentInput"
	},
	SelectBranchSignedDocumentInput:{
		meta:"SelectBranchSignedMetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	SelectBranchSignedMetaDocumentInput:{

	},
	SetPaymentStatusInput:{
		status:"PaymentStatus"
	},
	SetWifInput:{

	},
	SignByPresiderOnAnnualGeneralMeetInput:{
		presider_decision:"AnnualGeneralMeetingDecisionSignedDocumentInput"
	},
	SignBySecretaryOnAnnualGeneralMeetInput:{
		secretary_decision:"AnnualGeneralMeetingDecisionSignedDocumentInput"
	},
	SignatureInfoInput:{

	},
	SignedDigitalDocumentInput:{
		meta:"MetaDocumentInput",
		signatures:"SignatureInfoInput"
	},
	SovietMemberInput:{
		individual_data:"CreateIndividualDataInput"
	},
	StartResetKeyInput:{

	},
	SupplyOnRequestInput:{
		document:"AssetContributionActSignedDocumentInput"
	},
	SystemStatus: "enum" as const,
	UninstallExtensionInput:{

	},
	UnpublishRequestInput:{

	},
	Update:{
		organization_data:"UpdateOrganizationDataInput",
		vars:"VarsInput"
	},
	UpdateAccountInput:{
		entrepreneur_data:"UpdateEntrepreneurDataInput",
		individual_data:"UpdateIndividualDataInput",
		organization_data:"UpdateOrganizationDataInput"
	},
	UpdateBankAccountInput:{
		data:"BankAccountInput"
	},
	UpdateEntrepreneurDataInput:{
		country:"Country",
		details:"EntrepreneurDetailsInput"
	},
	UpdateIndividualDataInput:{
		passport:"PassportInput"
	},
	UpdateOrganizationDataInput:{
		details:"OrganizationDetailsInput",
		represented_by:"RepresentedByInput"
	},
	UpdateRequestInput:{

	},
	UserStatus: "enum" as const,
	VarsInput:{
		coopenomics_agreement:"AgreementInput",
		participant_application:"AgreementInput",
		privacy_agreement:"AgreementInput",
		signature_agreement:"AgreementInput",
		user_agreement:"AgreementInput",
		wallet_agreement:"AgreementInput"
	},
	VoteItemInput:{

	},
	VoteOnAnnualGeneralMeetInput:{
		ballot:"AnnualGeneralMeetingVotingBallotSignedDocumentInput",
		votes:"VoteItemInput"
	},
	WebPushSubscriptionDataInput:{
		keys:"WebPushSubscriptionKeysInput"
	},
	WebPushSubscriptionKeysInput:{

	}
}

export const ReturnTypes: Record<string,any> = {
	Account:{
		blockchain_account:"BlockchainAccount",
		participant_account:"ParticipantAccount",
		private_account:"PrivateAccount",
		provider_account:"MonoAccount",
		user_account:"UserAccount",
		username:"String"
	},
	AccountRamDelta:{
		account:"String",
		delta:"Int"
	},
	AccountResourceInfo:{
		available:"String",
		current_used:"String",
		last_usage_update_time:"String",
		max:"String",
		used:"String"
	},
	AccountsPaginationResult:{
		currentPage:"Int",
		items:"Account",
		totalCount:"Int",
		totalPages:"Int"
	},
	ActDetailAggregate:{
		action:"ExtendedBlockchainAction",
		documentAggregate:"DocumentAggregate"
	},
	ActionAuthorization:{
		actor:"String",
		permission:"String"
	},
	ActionReceipt:{
		abi_sequence:"Int",
		act_digest:"String",
		auth_sequence:"AuthSequence",
		code_sequence:"Int",
		global_sequence:"String",
		receiver:"String",
		recv_sequence:"String"
	},
	AgendaMeetPoint:{
		context:"String",
		decision:"String",
		title:"String"
	},
	AgendaWithDocuments:{
		action:"BlockchainAction",
		documents:"DocumentPackageAggregate",
		table:"BlockchainDecision"
	},
	AgreementVar:{
		protocol_day_month_year:"String",
		protocol_number:"String"
	},
	AuthSequence:{
		account:"String",
		sequence:"String"
	},
	Authority:{
		accounts:"PermissionLevelWeight",
		keys:"KeyWeight",
		threshold:"Int",
		waits:"WaitWeight"
	},
	BankAccount:{
		account_number:"String",
		bank_name:"String",
		card_number:"String",
		currency:"String",
		details:"BankAccountDetails"
	},
	BankAccountDetails:{
		bik:"String",
		corr:"String",
		kpp:"String"
	},
	BankPaymentMethod:{
		created_at:"DateTime",
		data:"BankAccount",
		is_default:"Boolean",
		method_id:"String",
		method_type:"String",
		updated_at:"DateTime",
		username:"String"
	},
	BlockchainAccount:{
		account_name:"String",
		core_liquid_balance:"String",
		cpu_limit:"AccountResourceInfo",
		cpu_weight:"String",
		created:"String",
		head_block_num:"Int",
		head_block_time:"String",
		last_code_update:"String",
		net_limit:"AccountResourceInfo",
		net_weight:"String",
		permissions:"Permission",
		privileged:"Boolean",
		ram_quota:"Int",
		ram_usage:"Int",
		refund_request:"RefundRequest",
		rex_info:"String",
		self_delegated_bandwidth:"ResourceDelegationDTO",
		total_resources:"ResourceOverview",
		voter_info:"String"
	},
	BlockchainAction:{
		account:"String",
		account_ram_deltas:"AccountRamDelta",
		action_ordinal:"Int",
		authorization:"ActionAuthorization",
		block_id:"String",
		block_num:"Int",
		chain_id:"String",
		console:"String",
		context_free:"Boolean",
		creator_action_ordinal:"Int",
		data:"JSON",
		elapsed:"Int",
		global_sequence:"String",
		name:"String",
		receipt:"ActionReceipt",
		receiver:"String",
		transaction_id:"String"
	},
	BlockchainDecision:{
		approved:"Boolean",
		authorization:"SignedBlockchainDocument",
		authorized:"Boolean",
		authorized_by:"String",
		batch_id:"Float",
		callback_contract:"String",
		confirm_callback:"String",
		coopname:"String",
		created_at:"String",
		decline_callback:"String",
		expired_at:"String",
		hash:"String",
		id:"Float",
		meta:"String",
		statement:"SignedBlockchainDocument",
		type:"String",
		username:"String",
		username_certificate:"UserCertificateUnion",
		validated:"Boolean",
		votes_against:"String",
		votes_against_certificates:"UserCertificateUnion",
		votes_for:"String",
		votes_for_certificates:"UserCertificateUnion"
	},
	BlockchainInfoDTO:{
		block_cpu_limit:"Int",
		block_net_limit:"Int",
		chain_id:"String",
		fork_db_head_block_id:"String",
		fork_db_head_block_num:"Int",
		head_block_id:"String",
		head_block_num:"Int",
		head_block_producer:"String",
		head_block_time:"String",
		last_irreversible_block_id:"String",
		last_irreversible_block_num:"Int",
		last_irreversible_block_time:"String",
		server_version:"String",
		server_version_string:"String",
		virtual_block_cpu_limit:"Int",
		virtual_block_net_limit:"Int"
	},
	Branch:{
		bank_account:"BankPaymentMethod",
		braname:"String",
		city:"String",
		coopname:"String",
		country:"String",
		details:"OrganizationDetails",
		email:"String",
		fact_address:"String",
		full_address:"String",
		full_name:"String",
		phone:"String",
		represented_by:"RepresentedBy",
		short_name:"String",
		trusted:"Individual",
		trustee:"Individual",
		type:"String"
	},
	ChartOfAccountsItem:{
		available:"String",
		blocked:"String",
		displayId:"String",
		id:"Int",
		name:"String",
		writeoff:"String"
	},
	ContactsDTO:{
		chairman:"PublicChairman",
		details:"OrganizationDetails",
		email:"String",
		full_address:"String",
		full_name:"String",
		phone:"String"
	},
	CooperativeOperatorAccount:{
		active_participants_count:"Float",
		announce:"String",
		coop_type:"String",
		created_at:"String",
		description:"String",
		document:"SignedBlockchainDocument",
		initial:"String",
		is_branched:"Boolean",
		is_cooperative:"Boolean",
		is_enrolled:"Boolean",
		meta:"String",
		minimum:"String",
		org_initial:"String",
		org_minimum:"String",
		org_registration:"String",
		parent_username:"String",
		referer:"String",
		registered_at:"String",
		registration:"String",
		registrator:"String",
		status:"String",
		storages:"String",
		type:"String",
		username:"String",
		verifications:"Verification"
	},
	CreateSubscriptionResponse:{
		message:"String",
		subscription:"WebPushSubscriptionDto",
		success:"Boolean"
	},
	CreateWithdrawResponse:{
		withdraw_hash:"String"
	},
	CreatedProjectFreeDecision:{
		decision:"String",
		id:"String",
		question:"String"
	},
	DateTime: `scalar.DateTime` as const,
	DecisionDetailAggregate:{
		action:"ExtendedBlockchainAction",
		documentAggregate:"DocumentAggregate",
		votes_against:"ExtendedBlockchainAction",
		votes_for:"ExtendedBlockchainAction"
	},
	Desktop:{
		authorizedHome:"String",
		coopname:"String",
		layout:"String",
		nonAuthorizedHome:"String",
		workspaces:"DesktopWorkspace"
	},
	DesktopWorkspace:{
		name:"String",
		title:"String"
	},
	DocumentAggregate:{
		document:"SignedDigitalDocument",
		hash:"String",
		rawDocument:"GeneratedDocument"
	},
	DocumentPackageAggregate:{
		acts:"ActDetailAggregate",
		decision:"DecisionDetailAggregate",
		links:"DocumentAggregate",
		statement:"StatementDetailAggregate"
	},
	DocumentsAggregatePaginationResult:{
		currentPage:"Int",
		items:"DocumentPackageAggregate",
		totalCount:"Int",
		totalPages:"Int"
	},
	Entrepreneur:{
		birthdate:"String",
		city:"String",
		country:"String",
		details:"EntrepreneurDetails",
		email:"String",
		first_name:"String",
		full_address:"String",
		last_name:"String",
		middle_name:"String",
		phone:"String",
		username:"String"
	},
	EntrepreneurCertificate:{
		first_name:"String",
		inn:"String",
		last_name:"String",
		middle_name:"String",
		type:"AccountType",
		username:"String"
	},
	EntrepreneurDetails:{
		inn:"String",
		ogrn:"String"
	},
	ExtendedBlockchainAction:{
		account:"String",
		account_ram_deltas:"AccountRamDelta",
		action_ordinal:"Int",
		actor_certificate:"UserCertificateUnion",
		authorization:"ActionAuthorization",
		block_id:"String",
		block_num:"Int",
		chain_id:"String",
		console:"String",
		context_free:"Boolean",
		creator_action_ordinal:"Int",
		data:"JSON",
		elapsed:"Int",
		global_sequence:"String",
		name:"String",
		receipt:"ActionReceipt",
		receiver:"String",
		transaction_id:"String"
	},
	Extension:{
		config:"JSON",
		created_at:"DateTime",
		description:"String",
		enabled:"Boolean",
		external_url:"String",
		image:"String",
		instructions:"String",
		is_available:"Boolean",
		is_builtin:"Boolean",
		is_desktop:"Boolean",
		is_installed:"Boolean",
		is_internal:"Boolean",
		name:"String",
		readme:"String",
		schema:"JSON",
		tags:"String",
		title:"String",
		updated_at:"DateTime"
	},
	GatewayPayment:{
		blockchain_data:"JSON",
		can_change_status:"Boolean",
		coopname:"String",
		created_at:"DateTime",
		direction:"PaymentDirection",
		direction_label:"String",
		expired_at:"DateTime",
		formatted_amount:"String",
		hash:"String",
		id:"ID",
		income_hash:"String",
		is_final:"Boolean",
		memo:"String",
		message:"String",
		outcome_hash:"String",
		payment_details:"PaymentDetails",
		payment_method_id:"String",
		provider:"String",
		quantity:"Float",
		statement:"JSON",
		status:"PaymentStatus",
		status_label:"String",
		symbol:"String",
		type:"PaymentType",
		type_label:"String",
		updated_at:"DateTime",
		username:"String",
		username_certificate:"UserCertificateUnion"
	},
	GeneratedDocument:{
		binary:"String",
		full_title:"String",
		hash:"String",
		html:"String",
		meta:"JSON"
	},
	Individual:{
		birthdate:"String",
		email:"String",
		first_name:"String",
		full_address:"String",
		last_name:"String",
		middle_name:"String",
		passport:"Passport",
		phone:"String",
		username:"String"
	},
	IndividualCertificate:{
		first_name:"String",
		last_name:"String",
		middle_name:"String",
		type:"AccountType",
		username:"String"
	},
	JSON: `scalar.JSON` as const,
	JSONObject: `scalar.JSONObject` as const,
	KeyWeight:{
		key:"String",
		weight:"Int"
	},
	LedgerAddOperation:{
		account_id:"Int",
		action:"String",
		comment:"String",
		coopname:"String",
		created_at:"DateTime",
		global_sequence:"Int",
		quantity:"String"
	},
	LedgerBlockOperation:{
		account_id:"Int",
		action:"String",
		comment:"String",
		coopname:"String",
		created_at:"DateTime",
		global_sequence:"Int",
		quantity:"String"
	},
	LedgerHistoryResponse:{
		currentPage:"Int",
		items:"LedgerOperation",
		totalCount:"Int",
		totalPages:"Int"
	},
	LedgerOperation:{
		"...on LedgerAddOperation":"LedgerAddOperation",
		"...on LedgerBlockOperation":"LedgerBlockOperation",
		"...on LedgerSubOperation":"LedgerSubOperation",
		"...on LedgerTransferOperation":"LedgerTransferOperation",
		"...on LedgerUnblockOperation":"LedgerUnblockOperation"
	},
	LedgerState:{
		chartOfAccounts:"ChartOfAccountsItem",
		coopname:"String"
	},
	LedgerSubOperation:{
		account_id:"Int",
		action:"String",
		comment:"String",
		coopname:"String",
		created_at:"DateTime",
		global_sequence:"Int",
		quantity:"String"
	},
	LedgerTransferOperation:{
		action:"String",
		comment:"String",
		coopname:"String",
		created_at:"DateTime",
		from_account_id:"Int",
		global_sequence:"Int",
		quantity:"String",
		to_account_id:"Int"
	},
	LedgerUnblockOperation:{
		account_id:"Int",
		action:"String",
		comment:"String",
		coopname:"String",
		created_at:"DateTime",
		global_sequence:"Int",
		quantity:"String"
	},
	Meet:{
		authorization:"DocumentAggregate",
		close_at:"DateTime",
		coopname:"String",
		created_at:"DateTime",
		current_quorum_percent:"Float",
		cycle:"Float",
		decision1:"DocumentAggregate",
		decision2:"DocumentAggregate",
		hash:"String",
		id:"Float",
		initiator:"String",
		initiator_certificate:"UserCertificateUnion",
		level:"String",
		notified_users:"String",
		open_at:"DateTime",
		presider:"String",
		presider_certificate:"UserCertificateUnion",
		proposal:"DocumentAggregate",
		quorum_passed:"Boolean",
		quorum_percent:"Float",
		secretary:"String",
		secretary_certificate:"UserCertificateUnion",
		signed_ballots:"Float",
		status:"String",
		type:"String"
	},
	MeetAggregate:{
		hash:"String",
		pre:"MeetPreProcessing",
		processed:"MeetProcessed",
		processing:"MeetProcessing"
	},
	MeetPreProcessing:{
		agenda:"AgendaMeetPoint",
		close_at:"DateTime",
		coopname:"String",
		hash:"String",
		initiator:"String",
		initiator_certificate:"UserCertificateUnion",
		open_at:"DateTime",
		presider:"String",
		presider_certificate:"UserCertificateUnion",
		proposal:"DocumentAggregate",
		secretary:"String",
		secretary_certificate:"UserCertificateUnion"
	},
	MeetProcessed:{
		coopname:"String",
		decision:"SignedDigitalDocument",
		decisionAggregate:"DocumentAggregate",
		hash:"String",
		presider:"String",
		presider_certificate:"UserCertificateUnion",
		quorum_passed:"Boolean",
		quorum_percent:"Int",
		results:"MeetQuestionResult",
		secretary:"String",
		secretary_certificate:"UserCertificateUnion",
		signed_ballots:"Int"
	},
	MeetProcessing:{
		extendedStatus:"ExtendedMeetStatus",
		hash:"String",
		isVoted:"Boolean",
		meet:"Meet",
		questions:"Question"
	},
	MeetQuestionResult:{
		accepted:"Boolean",
		context:"String",
		decision:"String",
		number:"Int",
		question_id:"Int",
		title:"String",
		votes_abstained:"Int",
		votes_against:"Int",
		votes_for:"Int"
	},
	MonoAccount:{
		email:"String",
		has_account:"Boolean",
		initial_order:"String",
		is_email_verified:"Boolean",
		is_registered:"Boolean",
		message:"String",
		public_key:"String",
		referer:"String",
		role:"String",
		status:"UserStatus",
		subscriber_hash:"String",
		subscriber_id:"String",
		type:"String",
		username:"String"
	},
	Mutation:{
		acceptChildOrder:"Transaction",
		addParticipant:"Account",
		addTrustedAccount:"Branch",
		cancelRequest:"Transaction",
		completeRequest:"Transaction",
		confirmReceiveOnRequest:"Transaction",
		confirmSupplyOnRequest:"Transaction",
		createAnnualGeneralMeet:"MeetAggregate",
		createBankAccount:"PaymentMethod",
		createBranch:"Branch",
		createChildOrder:"Transaction",
		createDepositPayment:"GatewayPayment",
		createInitialPayment:"GatewayPayment",
		createParentOffer:"Transaction",
		createProjectOfFreeDecision:"CreatedProjectFreeDecision",
		createWebPushSubscription:"CreateSubscriptionResponse",
		createWithdraw:"CreateWithdrawResponse",
		deactivateWebPushSubscriptionById:"Boolean",
		declineRequest:"Transaction",
		deleteBranch:"Boolean",
		deletePaymentMethod:"Boolean",
		deleteTrustedAccount:"Branch",
		deliverOnRequest:"Transaction",
		disputeOnRequest:"Transaction",
		editBranch:"Branch",
		generateAnnualGeneralMeetAgendaDocument:"GeneratedDocument",
		generateAnnualGeneralMeetDecisionDocument:"GeneratedDocument",
		generateAnnualGeneralMeetNotificationDocument:"GeneratedDocument",
		generateAssetContributionAct:"GeneratedDocument",
		generateAssetContributionDecision:"GeneratedDocument",
		generateAssetContributionStatement:"GeneratedDocument",
		generateBallotForAnnualGeneralMeetDocument:"GeneratedDocument",
		generateFreeDecision:"GeneratedDocument",
		generateParticipantApplication:"GeneratedDocument",
		generateParticipantApplicationDecision:"GeneratedDocument",
		generatePrivacyAgreement:"GeneratedDocument",
		generateProjectOfFreeDecision:"GeneratedDocument",
		generateReturnByAssetAct:"GeneratedDocument",
		generateReturnByAssetDecision:"GeneratedDocument",
		generateReturnByAssetStatement:"GeneratedDocument",
		generateReturnByMoneyDecisionDocument:"GeneratedDocument",
		generateReturnByMoneyStatementDocument:"GeneratedDocument",
		generateSelectBranchDocument:"GeneratedDocument",
		generateSignatureAgreement:"GeneratedDocument",
		generateSovietDecisionOnAnnualMeetDocument:"GeneratedDocument",
		generateUserAgreement:"GeneratedDocument",
		generateWalletAgreement:"GeneratedDocument",
		initSystem:"SystemInfo",
		installExtension:"Extension",
		installSystem:"SystemInfo",
		login:"RegisteredAccount",
		logout:"Boolean",
		moderateRequest:"Transaction",
		notifyOnAnnualGeneralMeet:"MeetAggregate",
		prohibitRequest:"Transaction",
		publishProjectOfFreeDecision:"Boolean",
		publishRequest:"Transaction",
		receiveOnRequest:"Transaction",
		refresh:"RegisteredAccount",
		registerAccount:"RegisteredAccount",
		registerParticipant:"Account",
		resetKey:"Boolean",
		restartAnnualGeneralMeet:"MeetAggregate",
		selectBranch:"Boolean",
		setPaymentStatus:"GatewayPayment",
		setWif:"Boolean",
		signByPresiderOnAnnualGeneralMeet:"MeetAggregate",
		signBySecretaryOnAnnualGeneralMeet:"MeetAggregate",
		startResetKey:"Boolean",
		supplyOnRequest:"Transaction",
		uninstallExtension:"Boolean",
		unpublishRequest:"Transaction",
		updateAccount:"Account",
		updateBankAccount:"PaymentMethod",
		updateExtension:"Extension",
		updateRequest:"Transaction",
		updateSystem:"SystemInfo",
		voteOnAnnualGeneralMeet:"MeetAggregate"
	},
	Organization:{
		city:"String",
		country:"String",
		details:"OrganizationDetails",
		email:"String",
		fact_address:"String",
		full_address:"String",
		full_name:"String",
		phone:"String",
		represented_by:"RepresentedBy",
		short_name:"String",
		type:"String",
		username:"String"
	},
	OrganizationCertificate:{
		inn:"String",
		ogrn:"String",
		represented_by:"RepresentedByCertificate",
		short_name:"String",
		type:"AccountType",
		username:"String"
	},
	OrganizationDetails:{
		inn:"String",
		kpp:"String",
		ogrn:"String"
	},
	PaginatedGatewayPaymentsPaginationResult:{
		currentPage:"Int",
		items:"GatewayPayment",
		totalCount:"Int",
		totalPages:"Int"
	},
	ParticipantAccount:{
		braname:"String",
		created_at:"DateTime",
		has_vote:"Boolean",
		initial_amount:"String",
		is_initial:"Boolean",
		is_minimum:"Boolean",
		last_min_pay:"DateTime",
		last_update:"DateTime",
		minimum_amount:"String",
		status:"String",
		type:"String",
		username:"String"
	},
	Passport:{
		code:"String",
		issued_at:"String",
		issued_by:"String",
		number:"Int",
		series:"Int"
	},
	PaymentDetails:{
		amount_plus_fee:"String",
		amount_without_fee:"String",
		data:"JSON",
		fact_fee_percent:"Float",
		fee_amount:"String",
		fee_percent:"Float",
		tolerance_percent:"Float"
	},
	PaymentMethod:{
		created_at:"DateTime",
		data:"PaymentMethodData",
		is_default:"Boolean",
		method_id:"String",
		method_type:"String",
		updated_at:"DateTime",
		username:"String"
	},
	PaymentMethodData:{
		"...on BankAccount":"BankAccount",
		"...on SbpAccount":"SbpAccount"
	},
	PaymentMethodPaginationResult:{
		currentPage:"Int",
		items:"PaymentMethod",
		totalCount:"Int",
		totalPages:"Int"
	},
	Permission:{
		parent:"String",
		perm_name:"String",
		required_auth:"Authority"
	},
	PermissionLevel:{
		actor:"String",
		permission:"String"
	},
	PermissionLevelWeight:{
		permission:"PermissionLevel",
		weight:"Int"
	},
	PrivateAccount:{
		entrepreneur_data:"Entrepreneur",
		individual_data:"Individual",
		organization_data:"Organization",
		type:"AccountType"
	},
	PrivateAccountSearchData:{
		"...on Entrepreneur":"Entrepreneur",
		"...on Individual":"Individual",
		"...on Organization":"Organization"
	},
	PrivateAccountSearchResult:{
		data:"PrivateAccountSearchData",
		highlightedFields:"String",
		score:"Float",
		type:"String"
	},
	PublicChairman:{
		first_name:"String",
		last_name:"String",
		middle_name:"String"
	},
	Query:{
		getAccount:"Account",
		getAccounts:"AccountsPaginationResult",
		getAgenda:"AgendaWithDocuments",
		getBranches:"Branch",
		getDesktop:"Desktop",
		getDocuments:"DocumentsAggregatePaginationResult",
		getExtensions:"Extension",
		getLedger:"LedgerState",
		getLedgerHistory:"LedgerHistoryResponse",
		getMeet:"MeetAggregate",
		getMeets:"MeetAggregate",
		getPaymentMethods:"PaymentMethodPaginationResult",
		getPayments:"PaginatedGatewayPaymentsPaginationResult",
		getSystemInfo:"SystemInfo",
		getUserWebPushSubscriptions:"WebPushSubscriptionDto",
		getWebPushSubscriptionStats:"SubscriptionStatsDto",
		searchPrivateAccounts:"PrivateAccountSearchResult"
	},
	Question:{
		context:"String",
		coopname:"String",
		counter_votes_abstained:"Float",
		counter_votes_against:"Float",
		counter_votes_for:"Float",
		decision:"String",
		id:"Float",
		meet_id:"Float",
		number:"Float",
		title:"String",
		voters_abstained:"String",
		voters_against:"String",
		voters_for:"String"
	},
	RefundRequest:{
		cpu_amount:"String",
		net_amount:"String",
		owner:"String",
		request_time:"String"
	},
	RegisteredAccount:{
		account:"Account",
		tokens:"Tokens"
	},
	RepresentedBy:{
		based_on:"String",
		first_name:"String",
		last_name:"String",
		middle_name:"String",
		position:"String"
	},
	RepresentedByCertificate:{
		first_name:"String",
		last_name:"String",
		middle_name:"String",
		position:"String"
	},
	ResourceDelegationDTO:{
		cpu_weight:"String",
		from:"String",
		net_weight:"String",
		to:"String"
	},
	ResourceOverview:{
		cpu_weight:"String",
		net_weight:"String",
		owner:"String",
		ram_bytes:"Int"
	},
	SbpAccount:{
		phone:"String"
	},
	SignatureInfo:{
		id:"Float",
		is_valid:"Boolean",
		meta:"JSON",
		public_key:"String",
		signature:"String",
		signed_at:"String",
		signed_hash:"String",
		signer:"String",
		signer_certificate:"UserCertificateUnion"
	},
	SignedBlockchainDocument:{
		doc_hash:"String",
		hash:"String",
		meta:"String",
		meta_hash:"String",
		signatures:"SignatureInfo",
		version:"String"
	},
	SignedDigitalDocument:{
		doc_hash:"String",
		hash:"String",
		meta:"JSON",
		meta_hash:"String",
		signatures:"SignatureInfo",
		version:"String"
	},
	StatementDetailAggregate:{
		action:"ExtendedBlockchainAction",
		documentAggregate:"DocumentAggregate"
	},
	SubscriptionStatsDto:{
		active:"Int",
		inactive:"Int",
		total:"Int",
		uniqueUsers:"Int"
	},
	SystemInfo:{
		blockchain_account:"BlockchainAccount",
		blockchain_info:"BlockchainInfoDTO",
		contacts:"ContactsDTO",
		cooperator_account:"CooperativeOperatorAccount",
		coopname:"String",
		system_status:"SystemStatus",
		vars:"Vars"
	},
	Token:{
		expires:"DateTime",
		token:"String"
	},
	Tokens:{
		access:"Token",
		refresh:"Token"
	},
	Transaction:{
		chain:"JSONObject",
		request:"JSONObject",
		resolved:"JSONObject",
		response:"JSONObject",
		returns:"JSONObject",
		revisions:"JSONObject",
		signatures:"JSONObject",
		signer:"JSONObject",
		transaction:"JSONObject"
	},
	UserAccount:{
		meta:"String",
		referer:"String",
		registered_at:"String",
		registrator:"String",
		status:"String",
		storages:"String",
		type:"String",
		username:"String",
		verifications:"Verification"
	},
	UserCertificateUnion:{
		"...on EntrepreneurCertificate":"EntrepreneurCertificate",
		"...on IndividualCertificate":"IndividualCertificate",
		"...on OrganizationCertificate":"OrganizationCertificate"
	},
	Vars:{
		confidential_email:"String",
		confidential_link:"String",
		contact_email:"String",
		coopenomics_agreement:"AgreementVar",
		coopname:"String",
		full_abbr:"String",
		full_abbr_dative:"String",
		full_abbr_genitive:"String",
		name:"String",
		participant_application:"AgreementVar",
		passport_request:"String",
		privacy_agreement:"AgreementVar",
		short_abbr:"String",
		signature_agreement:"AgreementVar",
		user_agreement:"AgreementVar",
		wallet_agreement:"AgreementVar",
		website:"String"
	},
	Verification:{
		created_at:"String",
		is_verified:"Boolean",
		last_update:"String",
		notice:"String",
		procedure:"String",
		verificator:"String"
	},
	WaitWeight:{
		wait_sec:"Int",
		weight:"Int"
	},
	WebPushSubscriptionDto:{
		authKey:"String",
		createdAt:"DateTime",
		endpoint:"String",
		id:"String",
		isActive:"Boolean",
		p256dhKey:"String",
		updatedAt:"DateTime",
		userAgent:"String",
		username:"String"
	}
}

export const Ops = {
query: "Query" as const,
	mutation: "Mutation" as const
}